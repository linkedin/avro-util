/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.avro.fastserde.generated.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class LocalTimestampRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6859749677474931187L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LocalTimestampRecord\",\"namespace\":\"com.linkedin.avro.fastserde.generated.avro\",\"fields\":[{\"name\":\"nestedTimestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"local-timestamp-millis\"}},{\"name\":\"nullableNestedTimestamp\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"local-timestamp-millis\"}]},{\"name\":\"nullableUnionOfDateAndLocalTimestamp\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"date\"},{\"type\":\"long\",\"logicalType\":\"local-timestamp-millis\"}]},{\"name\":\"unionOfDateAndLocalTimestamp\",\"type\":[{\"type\":\"int\",\"logicalType\":\"date\"},{\"type\":\"long\",\"logicalType\":\"local-timestamp-millis\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LocalTimestampRecord> ENCODER =
      new BinaryMessageEncoder<LocalTimestampRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LocalTimestampRecord> DECODER =
      new BinaryMessageDecoder<LocalTimestampRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<LocalTimestampRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<LocalTimestampRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LocalTimestampRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this LocalTimestampRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a LocalTimestampRecord from a ByteBuffer. */
  public static LocalTimestampRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long nestedTimestamp;
  @Deprecated public java.lang.Long nullableNestedTimestamp;
  @Deprecated public java.lang.Object nullableUnionOfDateAndLocalTimestamp;
  @Deprecated public java.lang.Object unionOfDateAndLocalTimestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LocalTimestampRecord() {}

  /**
   * All-args constructor.
   * @param nestedTimestamp The new value for nestedTimestamp
   * @param nullableNestedTimestamp The new value for nullableNestedTimestamp
   * @param nullableUnionOfDateAndLocalTimestamp The new value for nullableUnionOfDateAndLocalTimestamp
   * @param unionOfDateAndLocalTimestamp The new value for unionOfDateAndLocalTimestamp
   */
  public LocalTimestampRecord(java.lang.Long nestedTimestamp, java.lang.Long nullableNestedTimestamp, java.lang.Object nullableUnionOfDateAndLocalTimestamp, java.lang.Object unionOfDateAndLocalTimestamp) {
    this.nestedTimestamp = nestedTimestamp;
    this.nullableNestedTimestamp = nullableNestedTimestamp;
    this.nullableUnionOfDateAndLocalTimestamp = nullableUnionOfDateAndLocalTimestamp;
    this.unionOfDateAndLocalTimestamp = unionOfDateAndLocalTimestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return nestedTimestamp;
    case 1: return nullableNestedTimestamp;
    case 2: return nullableUnionOfDateAndLocalTimestamp;
    case 3: return unionOfDateAndLocalTimestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: nestedTimestamp = (java.lang.Long)value$; break;
    case 1: nullableNestedTimestamp = (java.lang.Long)value$; break;
    case 2: nullableUnionOfDateAndLocalTimestamp = (java.lang.Object)value$; break;
    case 3: unionOfDateAndLocalTimestamp = (java.lang.Object)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'nestedTimestamp' field.
   * @return The value of the 'nestedTimestamp' field.
   */
  public java.lang.Long getNestedTimestamp() {
    return nestedTimestamp;
  }

  /**
   * Sets the value of the 'nestedTimestamp' field.
   * @param value the value to set.
   */
  public void setNestedTimestamp(java.lang.Long value) {
    this.nestedTimestamp = value;
  }

  /**
   * Gets the value of the 'nullableNestedTimestamp' field.
   * @return The value of the 'nullableNestedTimestamp' field.
   */
  public java.lang.Long getNullableNestedTimestamp() {
    return nullableNestedTimestamp;
  }

  /**
   * Sets the value of the 'nullableNestedTimestamp' field.
   * @param value the value to set.
   */
  public void setNullableNestedTimestamp(java.lang.Long value) {
    this.nullableNestedTimestamp = value;
  }

  /**
   * Gets the value of the 'nullableUnionOfDateAndLocalTimestamp' field.
   * @return The value of the 'nullableUnionOfDateAndLocalTimestamp' field.
   */
  public java.lang.Object getNullableUnionOfDateAndLocalTimestamp() {
    return nullableUnionOfDateAndLocalTimestamp;
  }

  /**
   * Sets the value of the 'nullableUnionOfDateAndLocalTimestamp' field.
   * @param value the value to set.
   */
  public void setNullableUnionOfDateAndLocalTimestamp(java.lang.Object value) {
    this.nullableUnionOfDateAndLocalTimestamp = value;
  }

  /**
   * Gets the value of the 'unionOfDateAndLocalTimestamp' field.
   * @return The value of the 'unionOfDateAndLocalTimestamp' field.
   */
  public java.lang.Object getUnionOfDateAndLocalTimestamp() {
    return unionOfDateAndLocalTimestamp;
  }

  /**
   * Sets the value of the 'unionOfDateAndLocalTimestamp' field.
   * @param value the value to set.
   */
  public void setUnionOfDateAndLocalTimestamp(java.lang.Object value) {
    this.unionOfDateAndLocalTimestamp = value;
  }

  /**
   * Creates a new LocalTimestampRecord RecordBuilder.
   * @return A new LocalTimestampRecord RecordBuilder
   */
  public static com.linkedin.avro.fastserde.generated.avro.LocalTimestampRecord.Builder newBuilder() {
    return new com.linkedin.avro.fastserde.generated.avro.LocalTimestampRecord.Builder();
  }

  /**
   * Creates a new LocalTimestampRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LocalTimestampRecord RecordBuilder
   */
  public static com.linkedin.avro.fastserde.generated.avro.LocalTimestampRecord.Builder newBuilder(com.linkedin.avro.fastserde.generated.avro.LocalTimestampRecord.Builder other) {
    return new com.linkedin.avro.fastserde.generated.avro.LocalTimestampRecord.Builder(other);
  }

  /**
   * Creates a new LocalTimestampRecord RecordBuilder by copying an existing LocalTimestampRecord instance.
   * @param other The existing instance to copy.
   * @return A new LocalTimestampRecord RecordBuilder
   */
  public static com.linkedin.avro.fastserde.generated.avro.LocalTimestampRecord.Builder newBuilder(com.linkedin.avro.fastserde.generated.avro.LocalTimestampRecord other) {
    return new com.linkedin.avro.fastserde.generated.avro.LocalTimestampRecord.Builder(other);
  }

  /**
   * RecordBuilder for LocalTimestampRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LocalTimestampRecord>
    implements org.apache.avro.data.RecordBuilder<LocalTimestampRecord> {

    private long nestedTimestamp;
    private java.lang.Long nullableNestedTimestamp;
    private java.lang.Object nullableUnionOfDateAndLocalTimestamp;
    private java.lang.Object unionOfDateAndLocalTimestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.linkedin.avro.fastserde.generated.avro.LocalTimestampRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.nestedTimestamp)) {
        this.nestedTimestamp = data().deepCopy(fields()[0].schema(), other.nestedTimestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nullableNestedTimestamp)) {
        this.nullableNestedTimestamp = data().deepCopy(fields()[1].schema(), other.nullableNestedTimestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.nullableUnionOfDateAndLocalTimestamp)) {
        this.nullableUnionOfDateAndLocalTimestamp = data().deepCopy(fields()[2].schema(), other.nullableUnionOfDateAndLocalTimestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.unionOfDateAndLocalTimestamp)) {
        this.unionOfDateAndLocalTimestamp = data().deepCopy(fields()[3].schema(), other.unionOfDateAndLocalTimestamp);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing LocalTimestampRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.linkedin.avro.fastserde.generated.avro.LocalTimestampRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.nestedTimestamp)) {
        this.nestedTimestamp = data().deepCopy(fields()[0].schema(), other.nestedTimestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nullableNestedTimestamp)) {
        this.nullableNestedTimestamp = data().deepCopy(fields()[1].schema(), other.nullableNestedTimestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.nullableUnionOfDateAndLocalTimestamp)) {
        this.nullableUnionOfDateAndLocalTimestamp = data().deepCopy(fields()[2].schema(), other.nullableUnionOfDateAndLocalTimestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.unionOfDateAndLocalTimestamp)) {
        this.unionOfDateAndLocalTimestamp = data().deepCopy(fields()[3].schema(), other.unionOfDateAndLocalTimestamp);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'nestedTimestamp' field.
      * @return The value.
      */
    public java.lang.Long getNestedTimestamp() {
      return nestedTimestamp;
    }

    /**
      * Sets the value of the 'nestedTimestamp' field.
      * @param value The value of 'nestedTimestamp'.
      * @return This builder.
      */
    public com.linkedin.avro.fastserde.generated.avro.LocalTimestampRecord.Builder setNestedTimestamp(long value) {
      validate(fields()[0], value);
      this.nestedTimestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'nestedTimestamp' field has been set.
      * @return True if the 'nestedTimestamp' field has been set, false otherwise.
      */
    public boolean hasNestedTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'nestedTimestamp' field.
      * @return This builder.
      */
    public com.linkedin.avro.fastserde.generated.avro.LocalTimestampRecord.Builder clearNestedTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'nullableNestedTimestamp' field.
      * @return The value.
      */
    public java.lang.Long getNullableNestedTimestamp() {
      return nullableNestedTimestamp;
    }

    /**
      * Sets the value of the 'nullableNestedTimestamp' field.
      * @param value The value of 'nullableNestedTimestamp'.
      * @return This builder.
      */
    public com.linkedin.avro.fastserde.generated.avro.LocalTimestampRecord.Builder setNullableNestedTimestamp(java.lang.Long value) {
      validate(fields()[1], value);
      this.nullableNestedTimestamp = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'nullableNestedTimestamp' field has been set.
      * @return True if the 'nullableNestedTimestamp' field has been set, false otherwise.
      */
    public boolean hasNullableNestedTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'nullableNestedTimestamp' field.
      * @return This builder.
      */
    public com.linkedin.avro.fastserde.generated.avro.LocalTimestampRecord.Builder clearNullableNestedTimestamp() {
      nullableNestedTimestamp = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'nullableUnionOfDateAndLocalTimestamp' field.
      * @return The value.
      */
    public java.lang.Object getNullableUnionOfDateAndLocalTimestamp() {
      return nullableUnionOfDateAndLocalTimestamp;
    }

    /**
      * Sets the value of the 'nullableUnionOfDateAndLocalTimestamp' field.
      * @param value The value of 'nullableUnionOfDateAndLocalTimestamp'.
      * @return This builder.
      */
    public com.linkedin.avro.fastserde.generated.avro.LocalTimestampRecord.Builder setNullableUnionOfDateAndLocalTimestamp(java.lang.Object value) {
      validate(fields()[2], value);
      this.nullableUnionOfDateAndLocalTimestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'nullableUnionOfDateAndLocalTimestamp' field has been set.
      * @return True if the 'nullableUnionOfDateAndLocalTimestamp' field has been set, false otherwise.
      */
    public boolean hasNullableUnionOfDateAndLocalTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'nullableUnionOfDateAndLocalTimestamp' field.
      * @return This builder.
      */
    public com.linkedin.avro.fastserde.generated.avro.LocalTimestampRecord.Builder clearNullableUnionOfDateAndLocalTimestamp() {
      nullableUnionOfDateAndLocalTimestamp = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'unionOfDateAndLocalTimestamp' field.
      * @return The value.
      */
    public java.lang.Object getUnionOfDateAndLocalTimestamp() {
      return unionOfDateAndLocalTimestamp;
    }

    /**
      * Sets the value of the 'unionOfDateAndLocalTimestamp' field.
      * @param value The value of 'unionOfDateAndLocalTimestamp'.
      * @return This builder.
      */
    public com.linkedin.avro.fastserde.generated.avro.LocalTimestampRecord.Builder setUnionOfDateAndLocalTimestamp(java.lang.Object value) {
      validate(fields()[3], value);
      this.unionOfDateAndLocalTimestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'unionOfDateAndLocalTimestamp' field has been set.
      * @return True if the 'unionOfDateAndLocalTimestamp' field has been set, false otherwise.
      */
    public boolean hasUnionOfDateAndLocalTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'unionOfDateAndLocalTimestamp' field.
      * @return This builder.
      */
    public com.linkedin.avro.fastserde.generated.avro.LocalTimestampRecord.Builder clearUnionOfDateAndLocalTimestamp() {
      unionOfDateAndLocalTimestamp = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LocalTimestampRecord build() {
      try {
        LocalTimestampRecord record = new LocalTimestampRecord();
        record.nestedTimestamp = fieldSetFlags()[0] ? this.nestedTimestamp : (java.lang.Long) defaultValue(fields()[0]);
        record.nullableNestedTimestamp = fieldSetFlags()[1] ? this.nullableNestedTimestamp : (java.lang.Long) defaultValue(fields()[1]);
        record.nullableUnionOfDateAndLocalTimestamp = fieldSetFlags()[2] ? this.nullableUnionOfDateAndLocalTimestamp : (java.lang.Object) defaultValue(fields()[2]);
        record.unionOfDateAndLocalTimestamp = fieldSetFlags()[3] ? this.unionOfDateAndLocalTimestamp : (java.lang.Object) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LocalTimestampRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<LocalTimestampRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LocalTimestampRecord>
    READER$ = (org.apache.avro.io.DatumReader<LocalTimestampRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
