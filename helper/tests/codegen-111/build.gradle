/*
 * Copyright 2021 LinkedIn Corp.
 * Licensed under the BSD 2-Clause License (the "License").
 * See License in the project root for license information.
 */

plugins {
  id "java-library"
  id "jacoco"
  id "checkstyle"
}

configurations {
  codegen {
    extendsFrom implementation
  }
  resourcegen {
    extendsFrom runtimeClasspath
  }
}

sourceSets {
  main {
    java {
      srcDir 'src/main/java'
      srcDir "$buildDir/generated/sources/raw-avro/java/main"
      srcDir "$buildDir/generated/sources/compat-avro/java/main"
      srcDir "$buildDir/generated/sources/compat-avro-w-builders/java/main"
      srcDir "$buildDir/generated/sources/compat-avro-w-builders-min-avro18/java/main"
    }
    resources {
      srcDirs = ["src/main/raw-avro", "src/main/compat-avro", "$buildDir/generated/resources"]
    }
  }
}

task runVanillaAvroCodegen {
  description = 'generate specific classes using vanilla avro'

  dependsOn configurations.codegen
  // define input and output files so we can have incremental build when nothing changes
  inputs.files(configurations.codegen)
  inputs.dir("src/main/raw-avro")
  outputs.dir("$buildDir/generated/sources/raw-avro/java/main").withPropertyName('outputDir')

  fileTree(dir: 'src/main/raw-avro', include:'**/*.avsc').each { file ->
    doLast {
      javaexec {
        classpath configurations.codegen
        main = 'org.apache.avro.tool.Main'
        args = ["compile", "schema", file.getAbsolutePath(), "$buildDir/generated/sources/raw-avro/java/main"]
      }
    }
  }
}

task runCompatAvroCodegen {
  description = 'generate specific classes using compatibility helper'

  dependsOn configurations.codegen
  // define input and output files so we can have incremental build when nothing changes
  inputs.files(configurations.codegen)
  inputs.dir("src/main/compat-avro")
  outputs.dir("$buildDir/generated/sources/compat-avro/java/main").withPropertyName('outputDir')

  fileTree(dir: 'src/main/compat-avro', include:'**/*.avsc').each { file ->
    doLast {
      javaexec {
        classpath configurations.codegen
        main = 'com.linkedin.avroutil1.TestTool'
        args = [
            "-op", "compile",
            "-in", file.getAbsolutePath(),
            "-out", "$buildDir/generated/sources/compat-avro/java/main",
            "-min", "AVRO_1_4"
        ]
        debug = false
      }
    }
  }
}

task runCompatAvroCodegenWithBuilders {
  description = 'generate specific classes using compatibility helper with minimum avro 1.6 target'

  dependsOn configurations.codegen
  // define input and output files so we can have incremental build when nothing changes
  inputs.files(configurations.codegen)
  inputs.dir("src/main/compat-avro-w-builders")
  outputs.dir("$buildDir/generated/sources/compat-avro-w-builders/java/main").withPropertyName('outputDir')

  fileTree(dir: 'src/main/compat-avro-w-builders', include:'**/*.avsc').each { file ->
    doLast {
      javaexec {
        classpath configurations.codegen
        main = 'com.linkedin.avroutil1.TestTool'
        args = [
                "-op", "compile",
                "-in", file.getAbsolutePath(),
                "-out", "$buildDir/generated/sources/compat-avro-w-builders/java/main",
                "-min", "AVRO_1_6"
        ]
      }
    }
  }
}

task runCompatAvroCodegenWithBuildersMinAvro18 {
  description = 'generate specific classes using compatibility helper with minimum avro 1.8 target'

  dependsOn configurations.codegen
  // define input and output files so we can have incremental build when nothing changes
  inputs.files(configurations.codegen)
  inputs.dir("src/main/compat-avro-w-builders-min-avro18")
  outputs.dir("$buildDir/generated/sources/compat-avro-w-builders-min-avro18/java/main").withPropertyName('outputDir')

  fileTree(dir: 'src/main/compat-avro-w-builders-min-avro18', include:'**/*.avsc').each { file ->
    doLast {
      javaexec {
        classpath configurations.codegen
        main = 'com.linkedin.avroutil1.TestTool'
        args = [
                "-op", "compile",
                "-in", file.getAbsolutePath(),
                "-out", "$buildDir/generated/sources/compat-avro-w-builders-min-avro18/java/main",
                "-min", "AVRO_1_8"
        ]
      }
    }
  }
}

//copy output generated compatible code into resources so downstream modules can use it
task copyCompatAvroCodeToResources(type: Copy) {
  from "$buildDir/generated/sources/compat-avro/java/main"
  into "$buildDir/resources/main"
}

task runResourceGeneration(type: JavaExec) {
  classpath configurations.resourcegen + sourceSets.main.output
  main = "com.linkedin.avroutil1.compatibility.avro111.Generate111TestResources"
  args "$buildDir/generated/resources"
  debug false
}

jar {
  //normal contents
  from sourceSets.main.output
  //resource generation output. has to be explicitly included in the jar because
  //"processResources" ran before this was generated
  from "$buildDir/generated/resources"
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

//TODO - figure out why this must be done manually
runCompatAvroCodegen.dependsOn ":helper:tests:helper-tests-common:jar"
runCompatAvroCodegenWithBuilders.dependsOn ":helper:tests:helper-tests-common:jar"
runCompatAvroCodegenWithBuildersMinAvro18.dependsOn ":helper:tests:helper-tests-common:jar"
copyCompatAvroCodeToResources.dependsOn runCompatAvroCodegen
compileJava.dependsOn runVanillaAvroCodegen, runCompatAvroCodegen, runCompatAvroCodegenWithBuilders, runCompatAvroCodegenWithBuildersMinAvro18, copyCompatAvroCodeToResources
jar.dependsOn runResourceGeneration

dependencies {
  // trevni-avro and trevni-core no longer publish -test jars, but avro-tools still tries to pull in these test jars
  // gradle does not support custom resolution strategy for classifier. The blocks below are to do a workaround by
  // excluding trevni-avro and trevni-core first and then add them back without the test classifier
  codegen ("org.apache.avro:avro-tools:1.11.4") {
    exclude group: "org.apache.avro", module: "trevni-avro"
    exclude group: "org.apache.avro", module: "trevni-core"
  }
  codegen ("org.apache.avro:trevni-avro:1.11.4") {
    exclude group: "org.apache.avro", module: "trevni-core"
  }
  codegen "org.apache.avro:trevni-core:1.11.4"
  codegen "org.apache.avro:avro-compiler:1.11.4"
  codegen files('../codegenClasspath')
  codegen project(":helper:tests:helper-tests-common")
  codegen project(":helper:helper")

  //required because generated code depends on the helper
  implementation project(":helper:helper")
  implementation "org.apache.avro:avro:1.11.4"

  //this block required for resource generation code
  implementation project(":helper:tests:helper-tests-common")
  //redirect logging to log4j2 for resource generation
  resourcegen "org.apache.logging.log4j:log4j-core:2.17.1"
  resourcegen "org.apache.logging.log4j:log4j-slf4j-impl:2.17.1"
  resourcegen files('../codegenClasspath')
}
