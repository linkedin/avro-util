/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.avro.fastserde.generated.avro;

@SuppressWarnings("all")
public class TestRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"TestRecord\",\"namespace\":\"com.linkedin.avro.fastserde.generated.avro\",\"fields\":[{\"name\":\"testInt\",\"type\":\"int\"},{\"name\":\"testIntUnion\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"testLong\",\"type\":\"long\"},{\"name\":\"testLongUnion\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"testDouble\",\"type\":\"double\"},{\"name\":\"testDoubleUnion\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"testFloat\",\"type\":\"float\"},{\"name\":\"testFloatUnion\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"testBoolean\",\"type\":\"boolean\"},{\"name\":\"testBooleanUnion\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"testBytes\",\"type\":\"bytes\"},{\"name\":\"testBytesUnion\",\"type\":[\"null\",\"bytes\"],\"default\":null},{\"name\":\"testString\",\"type\":\"string\"},{\"name\":\"testStringUnion\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"testFixed\",\"type\":{\"type\":\"fixed\",\"name\":\"TestFixed\",\"size\":1}},{\"name\":\"testFixedUnion\",\"type\":[\"null\",\"TestFixed\"],\"default\":null},{\"name\":\"testFixedArray\",\"type\":{\"type\":\"array\",\"items\":\"TestFixed\"}},{\"name\":\"testFixedUnionArray\",\"type\":{\"type\":\"array\",\"items\":[\"null\",\"TestFixed\"]}},{\"name\":\"testEnum\",\"type\":{\"type\":\"enum\",\"name\":\"TestEnum\",\"symbols\":[\"A\",\"B\",\"C\",\"D\",\"E\"]}},{\"name\":\"testEnumUnion\",\"type\":[\"null\",\"TestEnum\"],\"default\":null},{\"name\":\"testEnumArray\",\"type\":{\"type\":\"array\",\"items\":\"TestEnum\"}},{\"name\":\"testEnumUnionArray\",\"type\":{\"type\":\"array\",\"items\":[\"null\",\"TestEnum\"]}},{\"name\":\"subRecordUnion\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"SubRecord\",\"fields\":[{\"name\":\"subField\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"anotherField\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"subRecord\",\"type\":\"SubRecord\"},{\"name\":\"recordsArray\",\"type\":{\"type\":\"array\",\"items\":\"SubRecord\"}},{\"name\":\"recordsMap\",\"type\":{\"type\":\"map\",\"values\":\"SubRecord\"}},{\"name\":\"recordsArrayUnion\",\"type\":[\"null\",{\"type\":\"array\",\"items\":[\"null\",\"SubRecord\"]}],\"default\":null},{\"name\":\"recordsMapUnion\",\"type\":[\"null\",{\"type\":\"map\",\"values\":[\"null\",\"SubRecord\"]}],\"default\":null},{\"name\":\"recordsArrayMap\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"map\",\"values\":[\"null\",\"SubRecord\"]}}},{\"name\":\"recordsMapArray\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"array\",\"items\":[\"null\",\"SubRecord\"]}}},{\"name\":\"recordsArrayMapUnion\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"map\",\"values\":[\"null\",\"SubRecord\"]}}]},{\"name\":\"recordsMapArrayUnion\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"array\",\"items\":[\"null\",\"SubRecord\"]}}],\"default\":null},{\"name\":\"union\",\"type\":[\"null\",\"SubRecord\",\"string\",\"int\"],\"default\":null},{\"name\":\"booleanArray\",\"type\":{\"type\":\"array\",\"items\":\"boolean\"},\"default\":[]},{\"name\":\"doubleArray\",\"type\":{\"type\":\"array\",\"items\":\"double\"},\"default\":[]},{\"name\":\"floatArray\",\"type\":{\"type\":\"array\",\"items\":\"float\"},\"default\":[]},{\"name\":\"intArray\",\"type\":{\"type\":\"array\",\"items\":\"int\"},\"default\":[]},{\"name\":\"longArray\",\"type\":{\"type\":\"array\",\"items\":\"long\"},\"default\":[]},{\"name\":\"stringArray\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"default\":[]}]}");
  public int testInt;
  public java.lang.Integer testIntUnion;
  public long testLong;
  public java.lang.Long testLongUnion;
  public double testDouble;
  public java.lang.Double testDoubleUnion;
  public float testFloat;
  public java.lang.Float testFloatUnion;
  public boolean testBoolean;
  public java.lang.Boolean testBooleanUnion;
  public java.nio.ByteBuffer testBytes;
  public java.nio.ByteBuffer testBytesUnion;
  public java.lang.CharSequence testString;
  public java.lang.CharSequence testStringUnion;
  public com.linkedin.avro.fastserde.generated.avro.TestFixed testFixed;
  public com.linkedin.avro.fastserde.generated.avro.TestFixed testFixedUnion;
  public java.util.List<com.linkedin.avro.fastserde.generated.avro.TestFixed> testFixedArray;
  public java.util.List<com.linkedin.avro.fastserde.generated.avro.TestFixed> testFixedUnionArray;
  public com.linkedin.avro.fastserde.generated.avro.TestEnum testEnum;
  public com.linkedin.avro.fastserde.generated.avro.TestEnum testEnumUnion;
  public java.util.List<com.linkedin.avro.fastserde.generated.avro.TestEnum> testEnumArray;
  public java.util.List<com.linkedin.avro.fastserde.generated.avro.TestEnum> testEnumUnionArray;
  public com.linkedin.avro.fastserde.generated.avro.SubRecord subRecordUnion;
  public com.linkedin.avro.fastserde.generated.avro.SubRecord subRecord;
  public java.util.List<com.linkedin.avro.fastserde.generated.avro.SubRecord> recordsArray;
  public java.util.Map<java.lang.CharSequence,com.linkedin.avro.fastserde.generated.avro.SubRecord> recordsMap;
  public java.util.List<com.linkedin.avro.fastserde.generated.avro.SubRecord> recordsArrayUnion;
  public java.util.Map<java.lang.CharSequence,com.linkedin.avro.fastserde.generated.avro.SubRecord> recordsMapUnion;
  public java.util.List<java.util.Map<java.lang.CharSequence,com.linkedin.avro.fastserde.generated.avro.SubRecord>> recordsArrayMap;
  public java.util.Map<java.lang.CharSequence,java.util.List<com.linkedin.avro.fastserde.generated.avro.SubRecord>> recordsMapArray;
  public java.util.List<java.util.Map<java.lang.CharSequence,com.linkedin.avro.fastserde.generated.avro.SubRecord>> recordsArrayMapUnion;
  public java.util.Map<java.lang.CharSequence,java.util.List<com.linkedin.avro.fastserde.generated.avro.SubRecord>> recordsMapArrayUnion;
  public java.lang.Object union;
  public java.util.List<java.lang.Boolean> booleanArray;
  public java.util.List<java.lang.Double> doubleArray;
  public java.util.List<java.lang.Float> floatArray;
  public java.util.List<java.lang.Integer> intArray;
  public java.util.List<java.lang.Long> longArray;
  public java.util.List<java.lang.CharSequence> stringArray;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return testInt;
    case 1: return testIntUnion;
    case 2: return testLong;
    case 3: return testLongUnion;
    case 4: return testDouble;
    case 5: return testDoubleUnion;
    case 6: return testFloat;
    case 7: return testFloatUnion;
    case 8: return testBoolean;
    case 9: return testBooleanUnion;
    case 10: return testBytes;
    case 11: return testBytesUnion;
    case 12: return testString;
    case 13: return testStringUnion;
    case 14: return testFixed;
    case 15: return testFixedUnion;
    case 16: return testFixedArray;
    case 17: return testFixedUnionArray;
    case 18: return testEnum;
    case 19: return testEnumUnion;
    case 20: return testEnumArray;
    case 21: return testEnumUnionArray;
    case 22: return subRecordUnion;
    case 23: return subRecord;
    case 24: return recordsArray;
    case 25: return recordsMap;
    case 26: return recordsArrayUnion;
    case 27: return recordsMapUnion;
    case 28: return recordsArrayMap;
    case 29: return recordsMapArray;
    case 30: return recordsArrayMapUnion;
    case 31: return recordsMapArrayUnion;
    case 32: return union;
    case 33: return booleanArray;
    case 34: return doubleArray;
    case 35: return floatArray;
    case 36: return intArray;
    case 37: return longArray;
    case 38: return stringArray;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: testInt = (java.lang.Integer)value$; break;
    case 1: testIntUnion = (java.lang.Integer)value$; break;
    case 2: testLong = (java.lang.Long)value$; break;
    case 3: testLongUnion = (java.lang.Long)value$; break;
    case 4: testDouble = (java.lang.Double)value$; break;
    case 5: testDoubleUnion = (java.lang.Double)value$; break;
    case 6: testFloat = (java.lang.Float)value$; break;
    case 7: testFloatUnion = (java.lang.Float)value$; break;
    case 8: testBoolean = (java.lang.Boolean)value$; break;
    case 9: testBooleanUnion = (java.lang.Boolean)value$; break;
    case 10: testBytes = (java.nio.ByteBuffer)value$; break;
    case 11: testBytesUnion = (java.nio.ByteBuffer)value$; break;
    case 12: testString = (java.lang.CharSequence)value$; break;
    case 13: testStringUnion = (java.lang.CharSequence)value$; break;
    case 14: testFixed = (com.linkedin.avro.fastserde.generated.avro.TestFixed)value$; break;
    case 15: testFixedUnion = (com.linkedin.avro.fastserde.generated.avro.TestFixed)value$; break;
    case 16: testFixedArray = (java.util.List<com.linkedin.avro.fastserde.generated.avro.TestFixed>)value$; break;
    case 17: testFixedUnionArray = (java.util.List<com.linkedin.avro.fastserde.generated.avro.TestFixed>)value$; break;
    case 18: testEnum = (com.linkedin.avro.fastserde.generated.avro.TestEnum)value$; break;
    case 19: testEnumUnion = (com.linkedin.avro.fastserde.generated.avro.TestEnum)value$; break;
    case 20: testEnumArray = (java.util.List<com.linkedin.avro.fastserde.generated.avro.TestEnum>)value$; break;
    case 21: testEnumUnionArray = (java.util.List<com.linkedin.avro.fastserde.generated.avro.TestEnum>)value$; break;
    case 22: subRecordUnion = (com.linkedin.avro.fastserde.generated.avro.SubRecord)value$; break;
    case 23: subRecord = (com.linkedin.avro.fastserde.generated.avro.SubRecord)value$; break;
    case 24: recordsArray = (java.util.List<com.linkedin.avro.fastserde.generated.avro.SubRecord>)value$; break;
    case 25: recordsMap = (java.util.Map<java.lang.CharSequence,com.linkedin.avro.fastserde.generated.avro.SubRecord>)value$; break;
    case 26: recordsArrayUnion = (java.util.List<com.linkedin.avro.fastserde.generated.avro.SubRecord>)value$; break;
    case 27: recordsMapUnion = (java.util.Map<java.lang.CharSequence,com.linkedin.avro.fastserde.generated.avro.SubRecord>)value$; break;
    case 28: recordsArrayMap = (java.util.List<java.util.Map<java.lang.CharSequence,com.linkedin.avro.fastserde.generated.avro.SubRecord>>)value$; break;
    case 29: recordsMapArray = (java.util.Map<java.lang.CharSequence,java.util.List<com.linkedin.avro.fastserde.generated.avro.SubRecord>>)value$; break;
    case 30: recordsArrayMapUnion = (java.util.List<java.util.Map<java.lang.CharSequence,com.linkedin.avro.fastserde.generated.avro.SubRecord>>)value$; break;
    case 31: recordsMapArrayUnion = (java.util.Map<java.lang.CharSequence,java.util.List<com.linkedin.avro.fastserde.generated.avro.SubRecord>>)value$; break;
    case 32: union = (java.lang.Object)value$; break;
    case 33: booleanArray = (java.util.List<java.lang.Boolean>)value$; break;
    case 34: doubleArray = (java.util.List<java.lang.Double>)value$; break;
    case 35: floatArray = (java.util.List<java.lang.Float>)value$; break;
    case 36: intArray = (java.util.List<java.lang.Integer>)value$; break;
    case 37: longArray = (java.util.List<java.lang.Long>)value$; break;
    case 38: stringArray = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
}
