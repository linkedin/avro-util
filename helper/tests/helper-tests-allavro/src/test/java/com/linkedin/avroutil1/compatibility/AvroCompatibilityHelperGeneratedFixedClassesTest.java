/*
 * Copyright 2020 LinkedIn Corp.
 * Licensed under the BSD 2-Clause License (the "License").
 * See License in the project root for license information.
 */

package com.linkedin.avroutil1.compatibility;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import org.apache.avro.Schema;
import org.apache.avro.io.BinaryDecoder;
import org.apache.avro.io.BinaryEncoder;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.specific.SpecificDatumReader;
import org.apache.avro.specific.SpecificDatumWriter;
import org.testng.Assert;
import org.testng.annotations.Test;


/**
 * tests fixed classes generated by {@link AvroCompatibilityHelper} under different avro versions
 */
public class AvroCompatibilityHelperGeneratedFixedClassesTest {

  @Test
  public void testFixedGeneratedUnderAvro14() throws Exception {
    under14.SimpleFixed instance = new under14.SimpleFixed(new byte[] {9, 9, 9});
    roundtrip(instance);
  }

  @Test
  public void testFixedGeneratedUnderAvro15() throws Exception {
    under15.SimpleFixed instance = new under15.SimpleFixed(new byte[] {9, 9, 9});
    roundtrip(instance);
  }

  @Test
  public void testFixedGeneratedUnderAvro16() throws Exception {
    under16.SimpleFixed instance = new under16.SimpleFixed(new byte[] {9, 9, 9});
    roundtrip(instance);
  }

  @Test
  public void testFixedGeneratedUnderAvro17() throws Exception {
    under17.SimpleFixed instance = new under17.SimpleFixed(new byte[] {9, 9, 9});
    roundtrip(instance);
  }

  @Test
  public void testFixedGeneratedUnderAvro18() throws Exception {
    under18.SimpleFixed instance = new under18.SimpleFixed(new byte[] {9, 9, 9});
    roundtrip(instance);
  }

  @Test
  public void testFixedGeneratedUnderAvro19() throws Exception {
    under19.SimpleFixed instance = new under19.SimpleFixed(new byte[] {9, 9, 9});
    roundtrip(instance);
  }

  private void roundtrip(Object thingie) throws Exception {
    Schema schema = SpecificData.get().getSchema(thingie.getClass());
    ByteArrayOutputStream os = new ByteArrayOutputStream();
    BinaryEncoder binaryEncoder = AvroCompatibilityHelper.newBinaryEncoder(os, false, null);
    SpecificDatumWriter<Object> writer = new SpecificDatumWriter<>(schema);
    writer.write(thingie, binaryEncoder);
    binaryEncoder.flush();
    byte[] serialized = os.toByteArray();
    ByteArrayInputStream is = new ByteArrayInputStream(serialized);
    BinaryDecoder binaryDecoder = AvroCompatibilityHelper.newBinaryDecoder(is, false, null);
    SpecificDatumReader<Object> reader = new SpecificDatumReader<>(schema);
    Object deserialize = reader.read(null, binaryDecoder);
    Assert.assertEquals(deserialize, thingie);
  }


}
