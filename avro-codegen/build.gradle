/*
 * Copyright 2018 LinkedIn Corp.
 * Licensed under the BSD 2-Clause License (the "License").
 * See License in the project root for license information.
 */

plugins {
    id "java-library"
    id "checkstyle"
    id "jacoco"
}

dependencies {
    api project(":parser")
    implementation project(":helper:helper")

    implementation "com.squareup:javapoet:1.13.0"
    implementation "commons-io:commons-io:2.6"
    implementation "org.apache.logging.log4j:log4j-api:2.17.1"
    implementation "com.beust:jcommander:1.78"
    implementation "org.apache.ant:ant:1.10.7"

    compileOnly ("org.apache.avro:avro:1.4.1") {
        exclude group: "org.mortbay.jetty"
        exclude group: "org.apache.velocity"
        exclude group: "commons-lang"
        exclude group: "org.jboss.netty"
        exclude group: "com.thoughtworks.paranamer", module: "paranamer-ant"
        exclude group: "org.slf4j"
    }

    testImplementation project(":test-common")
    testImplementation ("org.apache.avro:avro:1.4.1") {
        exclude group: "org.mortbay.jetty"
        exclude group: "org.apache.velocity"
        exclude group: "commons-lang"
        exclude group: "org.jboss.netty"
        exclude group: "com.thoughtworks.paranamer", module: "paranamer-ant"
        exclude group: "org.slf4j"
    }
    testImplementation 'net.openhft:compiler:2.4.1'
}

publishing {
    publications {
        "$project.name"(MavenPublication) {
            groupId project.group
            artifactId project.name
            version project.version

            from components.java
            artifact sourceJar
            artifact javadocJar

            //we strive to meet https://central.sonatype.org/pages/requirements.html
            pom {
                name = 'Avro Util'
                description = 'utilities for writing code that works across major avro versions'
                url = 'https://github.com/linkedin/avro-util'

                licenses {
                    license {
                        name = 'BSD 2-Clause'
                        url = 'https://raw.githubusercontent.com/linkedin/avro-util/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'radai-rosenblatt'
                        name = 'Radai Rosenblatt'
                        email = 'radai.rosenblatt@gmail.com'
                        organization = 'LinkedIn'
                        organizationUrl = 'linkedin.com'
                    }
                    developer {
                        id = 'abhishekmendhekar'
                        name = 'Abhishek Mendhekar'
                        organization = 'LinkedIn'
                        organizationUrl = 'linkedin.com'
                    }
                    developer {
                        id = 'jimhe'
                        name = 'Jim He'
                        email = 'jimjhe@gmail.com'
                        organization = 'LinkedIn'
                        organizationUrl = 'linkedin.com'
                    }
                    developer {
                        id = 'ghosthack'
                        name = 'Adrian Fernandez'
                        email = 'adrian@ghosthack.com'
                        organization = 'LinkedIn'
                        organizationUrl = 'linkedin.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com:linkedin/avro-util.git'
                    developerConnection = 'scm:git:ssh://github.com:linkedin/avro-util.git'
                    url = 'https://github.com/linkedin/avro-util'
                }
            }

            //remove the dependency on helper, and replace with one on helper-all
            pom.withXml {
                Node dependenciesNode = (Node) (asNode().dependencies[0])
                Collection<Node> dependencyNodes = dependenciesNode.children()
                List<Node> toRemove = new ArrayList<>()

                for (Node o : dependencyNodes) {
                    if ("$project.group" == o.groupId[0].text() && "helper" == o.artifactId[0].text()) {
                        toRemove.add(o)
                    }
                }

                for (Node o : toRemove) {
                    dependencyNodes.remove(o)
                }

                def dependencyNode = dependenciesNode.appendNode('dependency')
                dependencyNode.appendNode('groupId', "$project.group")
                dependencyNode.appendNode('artifactId', "helper-all")
                dependencyNode.appendNode('version', "$project.version")
                dependencyNode.appendNode('scope', "compile")
            }
        }
    }
}