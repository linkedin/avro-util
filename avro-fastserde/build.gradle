/*
 * Copyright 2020 LinkedIn Corp.
 * Licensed under the BSD 2-Clause License (the "License").â€¨
 * See License in the project root for license information.
 */

plugins {
  id "java-library"
  id "me.champeau.gradle.jmh" version "0.5.0"
}

configurations {
  avro1_4
  avro1_5
  avro1_6
  avro1_7
  avro1_8
  avro1_9
  avro1_10
}

test {
  //we run test multiple times with different avro
  //versions, so don't use the default test task
  enabled = false
}

def AVRO_1_4 = "org.apache.avro:avro:1.4.1"
def AVRO_1_5 = "org.apache.avro:avro:1.5.4"
def AVRO_1_6 = "org.apache.avro:avro:1.6.3"
def AVRO_1_7 = "org.apache.avro:avro:1.7.7"
def AVRO_1_8 = "org.apache.avro:avro:1.8.2"
def AVRO_1_9 = "org.apache.avro:avro:1.9.2"
def AVRO_1_10 = "org.apache.avro:avro:1.10.0"
def USE_AVRO_1_4 = project.hasProperty("USE_AVRO_1_4") ? true : false
def USE_AVRO_1_5 = project.hasProperty("USE_AVRO_1_5") ? true : false
def USE_AVRO_1_6 = project.hasProperty("USE_AVRO_1_6") ? true : false
def USE_AVRO_1_7 = project.hasProperty("USE_AVRO_1_7") ? true : false
def USE_AVRO_1_8 = project.hasProperty("USE_AVRO_1_8") ? true : false
def USE_AVRO_1_9 = project.hasProperty("USE_AVRO_1_9") ? true : false
//def USE_AVRO_1_10 = project.hasProperty("USE_AVRO_1_10") ? true : false
// default to use Avro-1.10 lib
def AVRO_LIB = AVRO_1_10
def USE_AVRO_1_10 = true
if (USE_AVRO_1_4) {
  AVRO_LIB = AVRO_1_4
  USE_AVRO_1_10 = false
} else if (USE_AVRO_1_5) {
  AVRO_LIB = AVRO_1_5
  USE_AVRO_1_10 = false
} else if (USE_AVRO_1_6) {
  AVRO_LIB = AVRO_1_6
  USE_AVRO_1_10 = false
} else if (USE_AVRO_1_7) {
  AVRO_LIB = AVRO_1_7
  USE_AVRO_1_10 = false
} else if (USE_AVRO_1_8) {
  AVRO_LIB = AVRO_1_8
  USE_AVRO_1_10 = false
} else if (USE_AVRO_1_9) {
  AVRO_LIB = AVRO_1_9
  USE_AVRO_1_10 = false
}



jmh {
  profilers = ['gc', 'pauses']
  duplicateClassesStrategy = 'warn'
  clean {
    delete "$buildDir/jmh-generated-classes"
    delete "$buildDir/jmh-generated-sources"
  }
}

sourceSets {
  codegen
  jmh {
    java.srcDirs = ['src/jmh/java']
    compileClasspath += test.output
    runtimeClasspath += test.output
  }
}

dependencies {
  compile project(":helper:helper")

  compile "org.slf4j:slf4j-api:1.7.14"
  compile "org.apache.commons:commons-lang3:3.4"
  compile "com.sun.codemodel:codemodel:2.6"

  // By default, the compile and testCompile configuration is using avro-1.8, and
  // if you need to switch to an old version of Avro, we need to make
  // sure the test classes is generated by the old version of Avro by
  // executing the following gradle task: 'generateAvroClasses14' or
  // 'generateAvroClasses17' based on which Avro version you choose.
  compileOnly AVRO_LIB

  testCompileOnly AVRO_LIB

  jmh AVRO_LIB

  testCompile 'org.testng:testng:6.14.3'
  testCompile 'org.slf4j:slf4j-simple:1.7.14'
  jmhCompile "org.openjdk.jmh:jmh-core:1.19"
  jmhAnnotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:1.19"

  avro1_4 (AVRO_1_4) {
    exclude group: "org.mortbay.jetty"
    exclude group: "org.apache.velocity"
    exclude group: "commons-lang"
    exclude group: "org.jboss.netty"
    exclude group: "com.thoughtworks.paranamer", module: "paranamer-ant"
    exclude group: "org.slf4j"
  }
  avro1_5 (AVRO_1_5) {
    exclude group: "org.slf4j"
  }
  avro1_6 (AVRO_1_6) {
    exclude group: "org.slf4j"
  }
  avro1_7 (AVRO_1_7) {
    exclude group: "org.slf4j"
  }
  avro1_8 (AVRO_1_8) {
    exclude group: "org.slf4j"
  }
  avro1_9 (AVRO_1_9) {
    exclude group: "org.slf4j"
  }
  avro1_10 (AVRO_1_10) {
    exclude group: "org.slf4j"
  }

  codegenCompile ("org.apache.avro:avro-compiler:1.10.0") {
    exclude group: "org.slf4j"
  }
  codegenCompile project(":avro-fastserde")
}

compileJmhJava {
  dependsOn compileTestJava
}

def avroVersions = ["1_4", "1_5", "1_6", "1_7", "1_8", "1_9", "1_10"]

for (String avroVersion : avroVersions) {

  task "testAvro${avroVersion}" (type: Test, group: "Verification", description: "runs unit tests with avro ${avroVersion}") {

    useTestNG() {
      excludeGroups "perfTest"
    }

    testLogging {
      events "passed", "skipped", "failed"
    }

    classpath = project.sourceSets.test.runtimeClasspath.filter {
      File file -> !(file.name.contains("avro") && !file.name.contains("helper"))
    }.plus (configurations."avro${avroVersion}")

    def gradleIsFun = avroVersion

    doFirst {
      System.out.println("classpath for avro " + gradleIsFun + " is:")
      classpath.each { System.out.println(it) }
    }
  }
}

test {
  testLogging.showStandardStreams = true
}

task cleanGeneratedClassFiles(type: Delete) {
  delete fileTree(dir: 'src/codegen', include: '**/*.class')
}

task cleanAllGeneratedFiles(type: Delete) {
  delete fileTree(dir: 'src/codegen', include: '**/*.java')
}

build.dependsOn cleanAllGeneratedFiles, testAvro1_4, testAvro1_5, testAvro1_6, testAvro1_7, testAvro1_8, testAvro1_9, testAvro1_10
build.finalizedBy cleanGeneratedClassFiles

task generateAvroClasses1_4(type:Exec) {
  commandLine "./regenerate_avro.sh"
  args "default_avro_140"
}

task generateAvroClasses1_5(type:Exec) {
  commandLine "./regenerate_avro.sh"
  args "default_avro_154"
}

task generateAvroClasses1_6(type:Exec) {
  commandLine "./regenerate_avro.sh"
  args "default_avro_163"
}

task generateAvroClasses1_7(type:Exec) {
  commandLine "./regenerate_avro.sh"
  args "default_avro_177"
}

task generateAvroClasses1_8(type:Exec) {
  commandLine "./regenerate_avro.sh"
  args "default_avro_182"
}

task generateAvroClasses1_9(type:Exec) {
  commandLine "./regenerate_avro.sh"
  args "default_avro_192"
}

task generateAvroClasses1_10(type:Exec) {
  commandLine "./regenerate_avro.sh"
  args "default_avro_1100"
}

task whetherToCompileAvroClasses1_10() {
  if (USE_AVRO_1_4) {
    dependsOn generateAvroClasses1_4
  } else if (USE_AVRO_1_5) {
    dependsOn generateAvroClasses1_5
  } else if (USE_AVRO_1_6) {
    dependsOn generateAvroClasses1_6
  } else if (USE_AVRO_1_7) {
    dependsOn generateAvroClasses1_7
  } else if (USE_AVRO_1_8) {
    dependsOn generateAvroClasses1_8
  } else if (USE_AVRO_1_9) {
    dependsOn generateAvroClasses1_9
  } else {
    dependsOn generateAvroClasses1_10
  }
}
// Only pre-compile for Avro-1.10 since the default Avro version is 1.10
compileTestJava.dependsOn whetherToCompileAvroClasses1_10

// Need to create several similar tasks since gradle will only run the same task at most once,
// but we need to clean up and re-compile for each Avro version since the avro classes will be
// generated with every Avro version.
task cleanupAndRebuildTestsForAvro1_4(type:Exec) {
  workingDir '../'
  commandLine './gradlew', 'avro-fastserde:clean', 'avro-fastserde:testClasses', '-PUSE_AVRO_1_4'
}
task cleanupAndRebuildTestsForAvro1_5(type:Exec) {
  workingDir '../'
  commandLine './gradlew', 'avro-fastserde:clean', 'avro-fastserde:testClasses', '-PUSE_AVRO_1_5'
}
task cleanupAndRebuildTestsForAvro1_6(type:Exec) {
  workingDir '../'
  commandLine './gradlew', 'avro-fastserde:clean', 'avro-fastserde:testClasses', '-PUSE_AVRO_1_6'
}
task cleanupAndRebuildTestsForAvro1_7(type:Exec) {
  workingDir '../'
  commandLine './gradlew', 'avro-fastserde:clean', 'avro-fastserde:testClasses', '-PUSE_AVRO_1_7'
}
task cleanupAndRebuildTestsForAvro1_8(type:Exec) {
  workingDir '../'
  commandLine './gradlew', 'avro-fastserde:clean', 'avro-fastserde:testClasses', '-PUSE_AVRO_1_8'
}
task cleanupAndRebuildTestsForAvro1_9(type:Exec) {
  workingDir '../'
  commandLine './gradlew', 'avro-fastserde:clean', 'avro-fastserde:testClasses', '-PUSE_AVRO_1_9'
}
task cleanupAndRebuildTestsForAvro1_10(type:Exec) {
  workingDir '../'
  commandLine './gradlew', 'avro-fastserde:clean', 'avro-fastserde:testClasses', '-PUSE_AVRO_1_10'
}
cleanupAndRebuildTestsForAvro1_4.dependsOn generateAvroClasses1_4
cleanupAndRebuildTestsForAvro1_5.dependsOn generateAvroClasses1_5
cleanupAndRebuildTestsForAvro1_6.dependsOn generateAvroClasses1_6
cleanupAndRebuildTestsForAvro1_7.dependsOn generateAvroClasses1_7
cleanupAndRebuildTestsForAvro1_8.dependsOn generateAvroClasses1_8
cleanupAndRebuildTestsForAvro1_9.dependsOn generateAvroClasses1_9
cleanupAndRebuildTestsForAvro1_10.dependsOn generateAvroClasses1_10

testAvro1_4.dependsOn cleanupAndRebuildTestsForAvro1_4
testAvro1_5.dependsOn cleanupAndRebuildTestsForAvro1_5
testAvro1_6.dependsOn cleanupAndRebuildTestsForAvro1_6
testAvro1_7.dependsOn cleanupAndRebuildTestsForAvro1_7
testAvro1_8.dependsOn cleanupAndRebuildTestsForAvro1_8
testAvro1_9.dependsOn cleanupAndRebuildTestsForAvro1_9
testAvro1_10.dependsOn cleanupAndRebuildTestsForAvro1_10

//custom publishing code to export a depndency on "helper-all":

task sourceJar(type: Jar) {
  from sourceSets.main.allJava
  classifier "sources"
}

task javadocJar(type: Jar) {
  from javadoc
  classifier = 'javadoc'
}

task testJar(type: Jar) {
  from sourceSets.test.allJava
  classifier = 'tests'
}

publishing {
  publications {
    "$project.name"(MavenPublication) {
      groupId project.group
      artifactId project.name
      version project.version

      from components.java
      artifact sourceJar
      artifact javadocJar
      artifact testJar

      //we strive to meet https://central.sonatype.org/pages/requirements.html
      pom {
        name = 'Avro Util'
        description = 'utilities for writing code that works across major avro versions'
        url = 'https://github.com/linkedin/avro-util'

        licenses {
          license {
            name = 'BSD 2-Clause'
            url = 'https://raw.githubusercontent.com/linkedin/avro-util/master/LICENSE'
          }
        }
        developers {
          developer {
            id = 'radai-rosenblatt'
            name = 'Radai Rosenblatt'
            email = 'radai.rosenblatt@gmail.com'
            organization = 'LinkedIn'
            organizationUrl = 'linkedin.com'
          }
          developer {
            id = 'abhishekmendhekar'
            name = 'Abhishek Mendhekar'
            organization = 'LinkedIn'
            organizationUrl = 'linkedin.com'
          }
          developer {
            id = 'jimhe'
            name = 'Jim He'
            email = 'jimjhe@gmail.com'
            organization = 'LinkedIn'
            organizationUrl = 'linkedin.com'
          }
          developer {
            id = 'ghosthack'
            name = 'Adrian Fernandez'
            email = 'adrian@ghosthack.com'
            organization = 'LinkedIn'
            organizationUrl = 'linkedin.com'
          }
        }
        scm {
          connection = 'scm:git:git://github.com:linkedin/avro-util.git'
          developerConnection = 'scm:git:ssh://github.com:linkedin/avro-util.git'
          url = 'https://github.com/linkedin/avro-util'
        }
      }

      //remove the dependency on helper, and replace with one on helper-all
      pom.withXml {
        Node dependenciesNode = (Node) (asNode().dependencies[0])
        Collection<Node> dependencyNodes = dependenciesNode.children()
        List<Node> toRemove = new ArrayList<>()

        for (Node o : dependencyNodes) {
          if ("$project.group" == o.groupId[0].text() && "helper" == o.artifactId[0].text()) {
            toRemove.add(o)
          }
        }

        for (Node o : toRemove) {
          dependencyNodes.remove(o)
        }

        def dependencyNode = dependenciesNode.appendNode('dependency')
        dependencyNode.appendNode('groupId', "$project.group")
        dependencyNode.appendNode('artifactId', "helper-all")
        dependencyNode.appendNode('version', "$project.version")
        dependencyNode.appendNode('scope', "compile")
      }
    }

    //record all of this module's publications in the bintray publications list
    //for the root project
    List<String> allPublicationNames = new ArrayList<>(Arrays.asList(rootProject.bintray.publications))
    List<String> projectAndDepPublicationNames = new ArrayList<>(project.publishing.publications.names)
    for (String projectPubName : projectAndDepPublicationNames) {
      if (!allPublicationNames.contains(projectPubName)) {
        allPublicationNames.add(projectPubName)
      }
    }
    rootProject.bintray.publications = allPublicationNames.toArray()
  }
}
