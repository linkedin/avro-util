/*
 * Copyright 2018 LinkedIn Corp.
 * Licensed under the BSD 2-Clause License (the "License").â€¨
 * See License in the project root for license information.
 */

plugins {
  id "java-library"
  id "checkstyle"
}

configurations {
  avro14
  avro15
  avro16
  avro17
  avro18
}

test {
  //we run test multiple times with different avro
  //versions, so dont use the default test task
  enabled = false
}

dependencies {

  compileOnly ('org.apache.avro:avro:1.4.1') {
    exclude group: "org.mortbay.jetty"
    exclude group: "org.apache.velocity"
    exclude group: "commons-lang"
    exclude group: "org.jboss.netty"
    exclude group: "com.thoughtworks.paranamer", module: "paranamer-ant"
  }

  //comment above and uncomment these when trying to
  //work on a particular version of avro in an IDE

  //api 'org.apache.avro:avro:1.8.2'
  //api 'org.apache.avro:avro-compiler:1.8.2'

  implementation 'org.json:json:20180813'

  testCompileOnly ('org.apache.avro:avro:1.4.1') {
    exclude group: "org.mortbay.jetty"
    exclude group: "org.apache.velocity"
    exclude group: "commons-lang"
    exclude group: "org.jboss.netty"
    exclude group: "com.thoughtworks.paranamer", module: "paranamer-ant"
  }

  testImplementation 'org.testng:testng:6.14.3'
  testImplementation 'commons-io:commons-io:2.6'
  testImplementation 'org.skyscreamer:jsonassert:1.5.0'
  testImplementation 'net.openhft:compiler:2.3.1'

  testRuntimeOnly 'org.slf4j:slf4j-simple:1.7.26'

  avro14 ("org.apache.avro:avro:1.4.1") {
    exclude group: "org.mortbay.jetty"
    exclude group: "org.apache.velocity"
    exclude group: "commons-lang"
    exclude group: "org.jboss.netty"
    exclude group: "com.thoughtworks.paranamer", module: "paranamer-ant"
    exclude group: "org.slf4j"
  }
  avro15 "org.apache.avro:avro:1.5.4"
  avro15 "org.apache.avro:avro-compiler:1.5.4"
  avro16 "org.apache.avro:avro:1.6.3"
  avro16 "org.apache.avro:avro-compiler:1.6.3"
  avro17 ("org.apache.avro:avro:1.7.7") {
    exclude group: "org.slf4j"
  }
  avro17 ("org.apache.avro:avro-compiler:1.7.7") {
    exclude group: "org.slf4j"
  }
  avro18 ("org.apache.avro:avro:1.8.2") {
    exclude group: "org.slf4j"
  }
  avro18 ("org.apache.avro:avro-compiler:1.8.2") {
    exclude group: "org.slf4j"
  }
}

def avroVersions = ["14", "15", "16", "17", "18"]

for (String avroVersion : avroVersions) {

  task "testAvro${avroVersion}" (type: Test, group: "Verification", description: "runs unit tests with avro ${avroVersion}") {
    useTestNG()

    testLogging {
      events "passed", "skipped", "failed"
    }

    classpath = project.sourceSets.test.runtimeClasspath.filter {
      File file -> !file.name.contains("avro")
    }.plus (configurations."avro${avroVersion}")

    def gradleIsFun = avroVersion

    doFirst {
      System.out.println("classpath for avro " + gradleIsFun + " is:")
      classpath.each { System.out.println(it) }
    }
  }

}

build.dependsOn testAvro14, testAvro17, testAvro18