/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.avro.fastserde.generated.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SubRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7362298388661868625L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SubRecord\",\"namespace\":\"com.linkedin.avro.fastserde.generated.avro\",\"fields\":[{\"name\":\"subField\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"anotherField\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SubRecord> ENCODER =
      new BinaryMessageEncoder<SubRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SubRecord> DECODER =
      new BinaryMessageDecoder<SubRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<SubRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<SubRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SubRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this SubRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a SubRecord from a ByteBuffer. */
  public static SubRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence subField;
  @Deprecated public java.lang.CharSequence anotherField;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SubRecord() {}

  /**
   * All-args constructor.
   * @param subField The new value for subField
   * @param anotherField The new value for anotherField
   */
  public SubRecord(java.lang.CharSequence subField, java.lang.CharSequence anotherField) {
    this.subField = subField;
    this.anotherField = anotherField;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return subField;
    case 1: return anotherField;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: subField = (java.lang.CharSequence)value$; break;
    case 1: anotherField = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'subField' field.
   * @return The value of the 'subField' field.
   */
  public java.lang.CharSequence getSubField() {
    return subField;
  }

  /**
   * Sets the value of the 'subField' field.
   * @param value the value to set.
   */
  public void setSubField(java.lang.CharSequence value) {
    this.subField = value;
  }

  /**
   * Gets the value of the 'anotherField' field.
   * @return The value of the 'anotherField' field.
   */
  public java.lang.CharSequence getAnotherField() {
    return anotherField;
  }

  /**
   * Sets the value of the 'anotherField' field.
   * @param value the value to set.
   */
  public void setAnotherField(java.lang.CharSequence value) {
    this.anotherField = value;
  }

  /**
   * Creates a new SubRecord RecordBuilder.
   * @return A new SubRecord RecordBuilder
   */
  public static com.linkedin.avro.fastserde.generated.avro.SubRecord.Builder newBuilder() {
    return new com.linkedin.avro.fastserde.generated.avro.SubRecord.Builder();
  }

  /**
   * Creates a new SubRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SubRecord RecordBuilder
   */
  public static com.linkedin.avro.fastserde.generated.avro.SubRecord.Builder newBuilder(com.linkedin.avro.fastserde.generated.avro.SubRecord.Builder other) {
    return new com.linkedin.avro.fastserde.generated.avro.SubRecord.Builder(other);
  }

  /**
   * Creates a new SubRecord RecordBuilder by copying an existing SubRecord instance.
   * @param other The existing instance to copy.
   * @return A new SubRecord RecordBuilder
   */
  public static com.linkedin.avro.fastserde.generated.avro.SubRecord.Builder newBuilder(com.linkedin.avro.fastserde.generated.avro.SubRecord other) {
    return new com.linkedin.avro.fastserde.generated.avro.SubRecord.Builder(other);
  }

  /**
   * RecordBuilder for SubRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SubRecord>
    implements org.apache.avro.data.RecordBuilder<SubRecord> {

    private java.lang.CharSequence subField;
    private java.lang.CharSequence anotherField;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.linkedin.avro.fastserde.generated.avro.SubRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.subField)) {
        this.subField = data().deepCopy(fields()[0].schema(), other.subField);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.anotherField)) {
        this.anotherField = data().deepCopy(fields()[1].schema(), other.anotherField);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SubRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.linkedin.avro.fastserde.generated.avro.SubRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.subField)) {
        this.subField = data().deepCopy(fields()[0].schema(), other.subField);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.anotherField)) {
        this.anotherField = data().deepCopy(fields()[1].schema(), other.anotherField);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'subField' field.
      * @return The value.
      */
    public java.lang.CharSequence getSubField() {
      return subField;
    }

    /**
      * Sets the value of the 'subField' field.
      * @param value The value of 'subField'.
      * @return This builder.
      */
    public com.linkedin.avro.fastserde.generated.avro.SubRecord.Builder setSubField(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.subField = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'subField' field has been set.
      * @return True if the 'subField' field has been set, false otherwise.
      */
    public boolean hasSubField() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'subField' field.
      * @return This builder.
      */
    public com.linkedin.avro.fastserde.generated.avro.SubRecord.Builder clearSubField() {
      subField = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'anotherField' field.
      * @return The value.
      */
    public java.lang.CharSequence getAnotherField() {
      return anotherField;
    }

    /**
      * Sets the value of the 'anotherField' field.
      * @param value The value of 'anotherField'.
      * @return This builder.
      */
    public com.linkedin.avro.fastserde.generated.avro.SubRecord.Builder setAnotherField(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.anotherField = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'anotherField' field has been set.
      * @return True if the 'anotherField' field has been set, false otherwise.
      */
    public boolean hasAnotherField() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'anotherField' field.
      * @return This builder.
      */
    public com.linkedin.avro.fastserde.generated.avro.SubRecord.Builder clearAnotherField() {
      anotherField = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SubRecord build() {
      try {
        SubRecord record = new SubRecord();
        record.subField = fieldSetFlags()[0] ? this.subField : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.anotherField = fieldSetFlags()[1] ? this.anotherField : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SubRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<SubRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SubRecord>
    READER$ = (org.apache.avro.io.DatumReader<SubRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
