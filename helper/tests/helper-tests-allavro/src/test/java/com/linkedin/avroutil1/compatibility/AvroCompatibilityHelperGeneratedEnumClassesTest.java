/*
 * Copyright 2020 LinkedIn Corp.
 * Licensed under the BSD 2-Clause License (the "License").
 * See License in the project root for license information.
 */

package com.linkedin.avroutil1.compatibility;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import org.apache.avro.Schema;
import org.apache.avro.io.BinaryDecoder;
import org.apache.avro.io.BinaryEncoder;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.specific.SpecificDatumReader;
import org.apache.avro.specific.SpecificDatumWriter;
import org.testng.Assert;
import org.testng.annotations.Test;
import under14.SimpleEnum;


/**
 * tests enum classes generated by {@link AvroCompatibilityHelper} under different avro versions
 */
public class AvroCompatibilityHelperGeneratedEnumClassesTest {

  @Test
  public void testEnumGeneratedUnderAvro14() throws Exception {
    under14.SimpleEnum instance = SimpleEnum.A;
    roundtrip(instance);
  }

  @Test
  public void testEnumGeneratedUnderAvro15() throws Exception {
    under15.SimpleEnum instance = under15.SimpleEnum.B;
    roundtrip(instance);
  }

  @Test
  public void testEnumGeneratedUnderAvro16() throws Exception {
    under16.SimpleEnum instance = under16.SimpleEnum.A;
    roundtrip(instance);
  }

  @Test
  public void testEnumGeneratedUnderAvro17() throws Exception {
    under17.SimpleEnum instance = under17.SimpleEnum.B;
    roundtrip(instance);
  }

  @Test
  public void testEnumGeneratedUnderAvro18() throws Exception {
    under18.SimpleEnum instance = under18.SimpleEnum.A;
    roundtrip(instance);
  }

  @Test
  public void testEnumGeneratedUnderAvro19() throws Exception {
    under19.SimpleEnum instance = under19.SimpleEnum.B;
    roundtrip(instance);
  }

  private void roundtrip(Object thingie) throws Exception {
    Schema schema = SpecificData.get().getSchema(thingie.getClass());
    ByteArrayOutputStream os = new ByteArrayOutputStream();
    BinaryEncoder binaryEncoder = AvroCompatibilityHelper.newBinaryEncoder(os, false, null);
    SpecificDatumWriter<Object> writer = new SpecificDatumWriter<>(schema);
    writer.write(thingie, binaryEncoder);
    binaryEncoder.flush();
    byte[] serialized = os.toByteArray();
    ByteArrayInputStream is = new ByteArrayInputStream(serialized);
    BinaryDecoder binaryDecoder = AvroCompatibilityHelper.newBinaryDecoder(is, false, null);
    SpecificDatumReader<Object> reader = new SpecificDatumReader<>(schema);
    Object deserialize = reader.read(null, binaryDecoder);
    Assert.assertEquals(deserialize, thingie);
  }


}
