/*
 * Copyright 2020 LinkedIn Corp.
 * Licensed under the BSD 2-Clause License (the "License").
 * See License in the project root for license information.
 */

plugins {
  id "java-library"
}

configurations {
  codegen
}

sourceSets {
  test {
    java {
      srcDir "$rootProject.projectDir/fastserde/avro-fastserde-tests-common/src/test/java"
      srcDir "$buildDir/generated/avro"
      exclude "com/linkedin/avro/fastserde/logical/types/**" // due to joda.time instead of java.time
    }
    resources {
      srcDir "$rootProject.projectDir/fastserde/avro-fastserde-tests-common/src/test/resources"
    }
  }
}

dependencies {
  testImplementation project(":helper:helper")

  testImplementation "org.slf4j:slf4j-api:1.7.14"
  testImplementation "org.apache.commons:commons-lang3:3.4"
  testImplementation "com.sun.codemodel:codemodel:2.6"
  implementation "joda-time:joda-time:2.12.5"  // required by generated Avro classes with logical types

  testImplementation ("org.apache.avro:avro:1.8.2") {
    exclude group: "org.slf4j"
  }

  testImplementation (project(":fastserde:avro-fastserde")) {
    exclude group: "org.apache.avro"
  }

  testImplementation 'org.testng:testng:6.14.3'
  testImplementation 'org.slf4j:slf4j-simple:1.7.14'

  codegen project(":helper:helper")
  codegen "org.apache.avro:avro-tools:1.8.2"
  codegen "org.apache.avro:avro-compiler:1.8.2"
}

test {
  testLogging.showStandardStreams = false

  useTestNG() {
    excludeGroups "perfTest"
  }

  testLogging {
    events "failed"
  }
}

task runVanillaAvroCodegen {
  description = 'generate specific classes using vanilla avro'

  dependsOn configurations.codegen
  // define input and output files so we can have incremental build when nothing changes
  inputs.dir("$rootProject.projectDir/fastserde/avro-fastserde-tests-common/src/test/avro")
  outputs.dir("$buildDir/generated/avro")

  fileTree(dir: "$rootProject.projectDir/fastserde/avro-fastserde-tests-common/src/test/avro", include:'**/*.avsc').each { file ->
    doLast {
      javaexec {
        classpath = configurations.codegen
        main = 'org.apache.avro.tool.Main'
        args = ["compile", "schema", file.getAbsolutePath(), "$buildDir/generated/avro"]
      }
    }
  }
}

compileTestJava.dependsOn runVanillaAvroCodegen
