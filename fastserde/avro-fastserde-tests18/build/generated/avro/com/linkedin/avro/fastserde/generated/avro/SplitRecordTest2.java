/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.avro.fastserde.generated.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SplitRecordTest2 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2903612279515547523L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SplitRecordTest2\",\"namespace\":\"com.linkedin.avro.fastserde.generated.avro\",\"fields\":[{\"name\":\"record1\",\"type\":{\"type\":\"record\",\"name\":\"StringRecord\",\"fields\":[{\"name\":\"field1\",\"type\":[\"null\",\"string\"],\"default\":null}],\"aliases\":[\"FullRecord\"]}},{\"name\":\"record2\",\"type\":{\"type\":\"record\",\"name\":\"IntRecord\",\"fields\":[{\"name\":\"field2\",\"type\":[\"null\",\"int\"],\"default\":null}],\"aliases\":[\"FullRecord\"]}},{\"name\":\"record3\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FullRecord\",\"fields\":[{\"name\":\"field1\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"field2\",\"type\":[\"null\",\"int\"],\"default\":null}]}}}],\"aliases\":[\"SplitRecordTest1\"]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SplitRecordTest2> ENCODER =
      new BinaryMessageEncoder<SplitRecordTest2>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SplitRecordTest2> DECODER =
      new BinaryMessageDecoder<SplitRecordTest2>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<SplitRecordTest2> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<SplitRecordTest2> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SplitRecordTest2>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this SplitRecordTest2 to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a SplitRecordTest2 from a ByteBuffer. */
  public static SplitRecordTest2 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public com.linkedin.avro.fastserde.generated.avro.StringRecord record1;
  @Deprecated public com.linkedin.avro.fastserde.generated.avro.IntRecord record2;
  @Deprecated public java.util.List<com.linkedin.avro.fastserde.generated.avro.FullRecord> record3;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SplitRecordTest2() {}

  /**
   * All-args constructor.
   * @param record1 The new value for record1
   * @param record2 The new value for record2
   * @param record3 The new value for record3
   */
  public SplitRecordTest2(com.linkedin.avro.fastserde.generated.avro.StringRecord record1, com.linkedin.avro.fastserde.generated.avro.IntRecord record2, java.util.List<com.linkedin.avro.fastserde.generated.avro.FullRecord> record3) {
    this.record1 = record1;
    this.record2 = record2;
    this.record3 = record3;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return record1;
    case 1: return record2;
    case 2: return record3;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: record1 = (com.linkedin.avro.fastserde.generated.avro.StringRecord)value$; break;
    case 1: record2 = (com.linkedin.avro.fastserde.generated.avro.IntRecord)value$; break;
    case 2: record3 = (java.util.List<com.linkedin.avro.fastserde.generated.avro.FullRecord>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'record1' field.
   * @return The value of the 'record1' field.
   */
  public com.linkedin.avro.fastserde.generated.avro.StringRecord getRecord1() {
    return record1;
  }

  /**
   * Sets the value of the 'record1' field.
   * @param value the value to set.
   */
  public void setRecord1(com.linkedin.avro.fastserde.generated.avro.StringRecord value) {
    this.record1 = value;
  }

  /**
   * Gets the value of the 'record2' field.
   * @return The value of the 'record2' field.
   */
  public com.linkedin.avro.fastserde.generated.avro.IntRecord getRecord2() {
    return record2;
  }

  /**
   * Sets the value of the 'record2' field.
   * @param value the value to set.
   */
  public void setRecord2(com.linkedin.avro.fastserde.generated.avro.IntRecord value) {
    this.record2 = value;
  }

  /**
   * Gets the value of the 'record3' field.
   * @return The value of the 'record3' field.
   */
  public java.util.List<com.linkedin.avro.fastserde.generated.avro.FullRecord> getRecord3() {
    return record3;
  }

  /**
   * Sets the value of the 'record3' field.
   * @param value the value to set.
   */
  public void setRecord3(java.util.List<com.linkedin.avro.fastserde.generated.avro.FullRecord> value) {
    this.record3 = value;
  }

  /**
   * Creates a new SplitRecordTest2 RecordBuilder.
   * @return A new SplitRecordTest2 RecordBuilder
   */
  public static com.linkedin.avro.fastserde.generated.avro.SplitRecordTest2.Builder newBuilder() {
    return new com.linkedin.avro.fastserde.generated.avro.SplitRecordTest2.Builder();
  }

  /**
   * Creates a new SplitRecordTest2 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SplitRecordTest2 RecordBuilder
   */
  public static com.linkedin.avro.fastserde.generated.avro.SplitRecordTest2.Builder newBuilder(com.linkedin.avro.fastserde.generated.avro.SplitRecordTest2.Builder other) {
    return new com.linkedin.avro.fastserde.generated.avro.SplitRecordTest2.Builder(other);
  }

  /**
   * Creates a new SplitRecordTest2 RecordBuilder by copying an existing SplitRecordTest2 instance.
   * @param other The existing instance to copy.
   * @return A new SplitRecordTest2 RecordBuilder
   */
  public static com.linkedin.avro.fastserde.generated.avro.SplitRecordTest2.Builder newBuilder(com.linkedin.avro.fastserde.generated.avro.SplitRecordTest2 other) {
    return new com.linkedin.avro.fastserde.generated.avro.SplitRecordTest2.Builder(other);
  }

  /**
   * RecordBuilder for SplitRecordTest2 instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SplitRecordTest2>
    implements org.apache.avro.data.RecordBuilder<SplitRecordTest2> {

    private com.linkedin.avro.fastserde.generated.avro.StringRecord record1;
    private com.linkedin.avro.fastserde.generated.avro.StringRecord.Builder record1Builder;
    private com.linkedin.avro.fastserde.generated.avro.IntRecord record2;
    private com.linkedin.avro.fastserde.generated.avro.IntRecord.Builder record2Builder;
    private java.util.List<com.linkedin.avro.fastserde.generated.avro.FullRecord> record3;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.linkedin.avro.fastserde.generated.avro.SplitRecordTest2.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.record1)) {
        this.record1 = data().deepCopy(fields()[0].schema(), other.record1);
        fieldSetFlags()[0] = true;
      }
      if (other.hasRecord1Builder()) {
        this.record1Builder = com.linkedin.avro.fastserde.generated.avro.StringRecord.newBuilder(other.getRecord1Builder());
      }
      if (isValidValue(fields()[1], other.record2)) {
        this.record2 = data().deepCopy(fields()[1].schema(), other.record2);
        fieldSetFlags()[1] = true;
      }
      if (other.hasRecord2Builder()) {
        this.record2Builder = com.linkedin.avro.fastserde.generated.avro.IntRecord.newBuilder(other.getRecord2Builder());
      }
      if (isValidValue(fields()[2], other.record3)) {
        this.record3 = data().deepCopy(fields()[2].schema(), other.record3);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SplitRecordTest2 instance
     * @param other The existing instance to copy.
     */
    private Builder(com.linkedin.avro.fastserde.generated.avro.SplitRecordTest2 other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.record1)) {
        this.record1 = data().deepCopy(fields()[0].schema(), other.record1);
        fieldSetFlags()[0] = true;
      }
      this.record1Builder = null;
      if (isValidValue(fields()[1], other.record2)) {
        this.record2 = data().deepCopy(fields()[1].schema(), other.record2);
        fieldSetFlags()[1] = true;
      }
      this.record2Builder = null;
      if (isValidValue(fields()[2], other.record3)) {
        this.record3 = data().deepCopy(fields()[2].schema(), other.record3);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'record1' field.
      * @return The value.
      */
    public com.linkedin.avro.fastserde.generated.avro.StringRecord getRecord1() {
      return record1;
    }

    /**
      * Sets the value of the 'record1' field.
      * @param value The value of 'record1'.
      * @return This builder.
      */
    public com.linkedin.avro.fastserde.generated.avro.SplitRecordTest2.Builder setRecord1(com.linkedin.avro.fastserde.generated.avro.StringRecord value) {
      validate(fields()[0], value);
      this.record1Builder = null;
      this.record1 = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'record1' field has been set.
      * @return True if the 'record1' field has been set, false otherwise.
      */
    public boolean hasRecord1() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'record1' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.linkedin.avro.fastserde.generated.avro.StringRecord.Builder getRecord1Builder() {
      if (record1Builder == null) {
        if (hasRecord1()) {
          setRecord1Builder(com.linkedin.avro.fastserde.generated.avro.StringRecord.newBuilder(record1));
        } else {
          setRecord1Builder(com.linkedin.avro.fastserde.generated.avro.StringRecord.newBuilder());
        }
      }
      return record1Builder;
    }

    /**
     * Sets the Builder instance for the 'record1' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.linkedin.avro.fastserde.generated.avro.SplitRecordTest2.Builder setRecord1Builder(com.linkedin.avro.fastserde.generated.avro.StringRecord.Builder value) {
      clearRecord1();
      record1Builder = value;
      return this;
    }

    /**
     * Checks whether the 'record1' field has an active Builder instance
     * @return True if the 'record1' field has an active Builder instance
     */
    public boolean hasRecord1Builder() {
      return record1Builder != null;
    }

    /**
      * Clears the value of the 'record1' field.
      * @return This builder.
      */
    public com.linkedin.avro.fastserde.generated.avro.SplitRecordTest2.Builder clearRecord1() {
      record1 = null;
      record1Builder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'record2' field.
      * @return The value.
      */
    public com.linkedin.avro.fastserde.generated.avro.IntRecord getRecord2() {
      return record2;
    }

    /**
      * Sets the value of the 'record2' field.
      * @param value The value of 'record2'.
      * @return This builder.
      */
    public com.linkedin.avro.fastserde.generated.avro.SplitRecordTest2.Builder setRecord2(com.linkedin.avro.fastserde.generated.avro.IntRecord value) {
      validate(fields()[1], value);
      this.record2Builder = null;
      this.record2 = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'record2' field has been set.
      * @return True if the 'record2' field has been set, false otherwise.
      */
    public boolean hasRecord2() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'record2' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.linkedin.avro.fastserde.generated.avro.IntRecord.Builder getRecord2Builder() {
      if (record2Builder == null) {
        if (hasRecord2()) {
          setRecord2Builder(com.linkedin.avro.fastserde.generated.avro.IntRecord.newBuilder(record2));
        } else {
          setRecord2Builder(com.linkedin.avro.fastserde.generated.avro.IntRecord.newBuilder());
        }
      }
      return record2Builder;
    }

    /**
     * Sets the Builder instance for the 'record2' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.linkedin.avro.fastserde.generated.avro.SplitRecordTest2.Builder setRecord2Builder(com.linkedin.avro.fastserde.generated.avro.IntRecord.Builder value) {
      clearRecord2();
      record2Builder = value;
      return this;
    }

    /**
     * Checks whether the 'record2' field has an active Builder instance
     * @return True if the 'record2' field has an active Builder instance
     */
    public boolean hasRecord2Builder() {
      return record2Builder != null;
    }

    /**
      * Clears the value of the 'record2' field.
      * @return This builder.
      */
    public com.linkedin.avro.fastserde.generated.avro.SplitRecordTest2.Builder clearRecord2() {
      record2 = null;
      record2Builder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'record3' field.
      * @return The value.
      */
    public java.util.List<com.linkedin.avro.fastserde.generated.avro.FullRecord> getRecord3() {
      return record3;
    }

    /**
      * Sets the value of the 'record3' field.
      * @param value The value of 'record3'.
      * @return This builder.
      */
    public com.linkedin.avro.fastserde.generated.avro.SplitRecordTest2.Builder setRecord3(java.util.List<com.linkedin.avro.fastserde.generated.avro.FullRecord> value) {
      validate(fields()[2], value);
      this.record3 = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'record3' field has been set.
      * @return True if the 'record3' field has been set, false otherwise.
      */
    public boolean hasRecord3() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'record3' field.
      * @return This builder.
      */
    public com.linkedin.avro.fastserde.generated.avro.SplitRecordTest2.Builder clearRecord3() {
      record3 = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SplitRecordTest2 build() {
      try {
        SplitRecordTest2 record = new SplitRecordTest2();
        if (record1Builder != null) {
          record.record1 = this.record1Builder.build();
        } else {
          record.record1 = fieldSetFlags()[0] ? this.record1 : (com.linkedin.avro.fastserde.generated.avro.StringRecord) defaultValue(fields()[0]);
        }
        if (record2Builder != null) {
          record.record2 = this.record2Builder.build();
        } else {
          record.record2 = fieldSetFlags()[1] ? this.record2 : (com.linkedin.avro.fastserde.generated.avro.IntRecord) defaultValue(fields()[1]);
        }
        record.record3 = fieldSetFlags()[2] ? this.record3 : (java.util.List<com.linkedin.avro.fastserde.generated.avro.FullRecord>) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SplitRecordTest2>
    WRITER$ = (org.apache.avro.io.DatumWriter<SplitRecordTest2>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SplitRecordTest2>
    READER$ = (org.apache.avro.io.DatumReader<SplitRecordTest2>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
