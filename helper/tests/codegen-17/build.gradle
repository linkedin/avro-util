/*
 * Copyright 2020 LinkedIn Corp.
 * Licensed under the BSD 2-Clause License (the "License").â€¨
 * See License in the project root for license information.
 */

plugins {
  id "java-library"
  id "jacoco"
  id "checkstyle"
}

configurations {
  codegen {
    extendsFrom implementation
  }
  resourcegen {
    extendsFrom runtimeClasspath
  }
}

sourceSets {
  main {
    java {
      srcDir 'src/main/java'
      srcDir "$buildDir/generated/sources/raw-avro/java/main"
      srcDir "$buildDir/generated/sources/compat-avro/java/main"
    }
    resources {
      srcDirs = ["src/main/raw-avro", "src/main/compat-avro", "$buildDir/generated/resources"]
    }
  }
}

task runVanillaAvroCodegen {
  description = 'generate specific classes using vanilla avro'
  fileTree(dir: 'src/main/raw-avro', include:'**/*.avsc').each { file ->
    doLast {
      javaexec {
        classpath configurations.codegen
        main = 'org.apache.avro.tool.Main'
        args = ["compile", "schema", file.getAbsolutePath(), "$buildDir/generated/sources/raw-avro/java/main"]
      }
    }
  }
}

task runCompatAvroCodegen {
  description = 'generate specific classes using compatibility helper'
  outputs.dir("$buildDir/generated/sources/compat-avro/java/main").withPropertyName('outputDir')
  fileTree(dir: 'src/main/compat-avro', include:'**/*.avsc').each { file ->
    doLast {
      javaexec {
        classpath configurations.codegen
        main = 'com.linkedin.avroutil1.TestTool'
        args = ["compile", file.getAbsolutePath(), "$buildDir/generated/sources/compat-avro/java/main"]
      }
    }
  }
}

//copy output generated compatible code into resources so downstream modules can use it
task copyCompatAvroCodeToResources(type: Copy) {
  from "$buildDir/generated/sources/compat-avro/java/main"
  into "$buildDir/resources/main"
}

task runResourceGeneration(type: JavaExec) {
  classpath configurations.resourcegen + sourceSets.main.output
  main = "com.linkedin.avroutil1.compatibility.avro17.Generate17TestResources"
  args "$buildDir/generated/resources"
  debug false
}

jar {
  //normal contents
  from sourceSets.main.output
  //resource generation output. has to be explicitly included in the jar because
  //"processResources" ran before this was generated
  from "$buildDir/generated/resources"
}

//TODO - figure out why this must be done manually
runCompatAvroCodegen.dependsOn ":helper:tests:helper-tests-common:jar"
copyCompatAvroCodeToResources.dependsOn runCompatAvroCodegen
compileJava.dependsOn runVanillaAvroCodegen, runCompatAvroCodegen
jar.dependsOn runResourceGeneration

dependencies {
  codegen "org.apache.avro:avro-tools:1.7.7"
  codegen "org.apache.avro:avro-compiler:1.7.7"
  codegen project(":helper:tests:helper-tests-common")
  codegen project(":helper:helper")

  //required because generated code depends on the helper
  implementation project(":helper:helper")
  implementation "org.apache.avro:avro:1.7.7"

  //this block required for resource generation code
  implementation project(":helper:tests:helper-tests-common")
  //redirect logging to log4j2 for resource generation
  resourcegen "org.apache.logging.log4j:log4j-core:2.11.2"
  resourcegen "org.apache.logging.log4j:log4j-slf4j-impl:2.11.2"
  resourcegen files('../codegenClasspath')
}