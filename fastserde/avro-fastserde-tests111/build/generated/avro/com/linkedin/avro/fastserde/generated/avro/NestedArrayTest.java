/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.avro.fastserde.generated.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class NestedArrayTest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6285366111431011658L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NestedArrayTest\",\"namespace\":\"com.linkedin.avro.fastserde.generated.avro\",\"fields\":[{\"name\":\"NestedArrayItems\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"NestedArrayItem\",\"fields\":[{\"name\":\"ItemName\",\"type\":\"string\"}]}}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<NestedArrayTest> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<NestedArrayTest> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<NestedArrayTest> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<NestedArrayTest> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<NestedArrayTest> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this NestedArrayTest to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a NestedArrayTest from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a NestedArrayTest instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static NestedArrayTest fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.List<java.util.List<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem>> NestedArrayItems;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public NestedArrayTest() {}

  /**
   * All-args constructor.
   * @param NestedArrayItems The new value for NestedArrayItems
   */
  public NestedArrayTest(java.util.List<java.util.List<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem>> NestedArrayItems) {
    this.NestedArrayItems = NestedArrayItems;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return NestedArrayItems;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: NestedArrayItems = (java.util.List<java.util.List<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem>>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'NestedArrayItems' field.
   * @return The value of the 'NestedArrayItems' field.
   */
  public java.util.List<java.util.List<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem>> getNestedArrayItems() {
    return NestedArrayItems;
  }


  /**
   * Sets the value of the 'NestedArrayItems' field.
   * @param value the value to set.
   */
  public void setNestedArrayItems(java.util.List<java.util.List<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem>> value) {
    this.NestedArrayItems = value;
  }

  /**
   * Creates a new NestedArrayTest RecordBuilder.
   * @return A new NestedArrayTest RecordBuilder
   */
  public static com.linkedin.avro.fastserde.generated.avro.NestedArrayTest.Builder newBuilder() {
    return new com.linkedin.avro.fastserde.generated.avro.NestedArrayTest.Builder();
  }

  /**
   * Creates a new NestedArrayTest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new NestedArrayTest RecordBuilder
   */
  public static com.linkedin.avro.fastserde.generated.avro.NestedArrayTest.Builder newBuilder(com.linkedin.avro.fastserde.generated.avro.NestedArrayTest.Builder other) {
    if (other == null) {
      return new com.linkedin.avro.fastserde.generated.avro.NestedArrayTest.Builder();
    } else {
      return new com.linkedin.avro.fastserde.generated.avro.NestedArrayTest.Builder(other);
    }
  }

  /**
   * Creates a new NestedArrayTest RecordBuilder by copying an existing NestedArrayTest instance.
   * @param other The existing instance to copy.
   * @return A new NestedArrayTest RecordBuilder
   */
  public static com.linkedin.avro.fastserde.generated.avro.NestedArrayTest.Builder newBuilder(com.linkedin.avro.fastserde.generated.avro.NestedArrayTest other) {
    if (other == null) {
      return new com.linkedin.avro.fastserde.generated.avro.NestedArrayTest.Builder();
    } else {
      return new com.linkedin.avro.fastserde.generated.avro.NestedArrayTest.Builder(other);
    }
  }

  /**
   * RecordBuilder for NestedArrayTest instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NestedArrayTest>
    implements org.apache.avro.data.RecordBuilder<NestedArrayTest> {

    private java.util.List<java.util.List<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem>> NestedArrayItems;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.linkedin.avro.fastserde.generated.avro.NestedArrayTest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.NestedArrayItems)) {
        this.NestedArrayItems = data().deepCopy(fields()[0].schema(), other.NestedArrayItems);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
    }

    /**
     * Creates a Builder by copying an existing NestedArrayTest instance
     * @param other The existing instance to copy.
     */
    private Builder(com.linkedin.avro.fastserde.generated.avro.NestedArrayTest other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.NestedArrayItems)) {
        this.NestedArrayItems = data().deepCopy(fields()[0].schema(), other.NestedArrayItems);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'NestedArrayItems' field.
      * @return The value.
      */
    public java.util.List<java.util.List<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem>> getNestedArrayItems() {
      return NestedArrayItems;
    }


    /**
      * Sets the value of the 'NestedArrayItems' field.
      * @param value The value of 'NestedArrayItems'.
      * @return This builder.
      */
    public com.linkedin.avro.fastserde.generated.avro.NestedArrayTest.Builder setNestedArrayItems(java.util.List<java.util.List<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem>> value) {
      validate(fields()[0], value);
      this.NestedArrayItems = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'NestedArrayItems' field has been set.
      * @return True if the 'NestedArrayItems' field has been set, false otherwise.
      */
    public boolean hasNestedArrayItems() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'NestedArrayItems' field.
      * @return This builder.
      */
    public com.linkedin.avro.fastserde.generated.avro.NestedArrayTest.Builder clearNestedArrayItems() {
      NestedArrayItems = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public NestedArrayTest build() {
      try {
        NestedArrayTest record = new NestedArrayTest();
        record.NestedArrayItems = fieldSetFlags()[0] ? this.NestedArrayItems : (java.util.List<java.util.List<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem>>) defaultValue(fields()[0]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<NestedArrayTest>
    WRITER$ = (org.apache.avro.io.DatumWriter<NestedArrayTest>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<NestedArrayTest>
    READER$ = (org.apache.avro.io.DatumReader<NestedArrayTest>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    long size0 = this.NestedArrayItems.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.util.List<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem> e0: this.NestedArrayItems) {
      actualSize0++;
      out.startItem();
      long size1 = e0.size();
      out.writeArrayStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (com.linkedin.avro.fastserde.generated.avro.NestedArrayItem e1: e0) {
        actualSize1++;
        out.startItem();
        e1.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize1 != size1)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      long size0 = in.readArrayStart();
      java.util.List<java.util.List<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem>> a0 = this.NestedArrayItems;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.util.List<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem>>((int)size0, SCHEMA$.getField("NestedArrayItems").schema());
        this.NestedArrayItems = a0;
      } else a0.clear();
      SpecificData.Array<java.util.List<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem>> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.util.List<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem>>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.util.List<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem> e0 = (ga0 != null ? ga0.peek() : null);
          long size1 = in.readArrayStart();
          java.util.List<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem> a1 = e0;
          if (a1 == null) {
            a1 = new SpecificData.Array<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem>((int)size1, SCHEMA$.getField("NestedArrayItems").schema().getElementType());
            e0 = a1;
          } else a1.clear();
          SpecificData.Array<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              com.linkedin.avro.fastserde.generated.avro.NestedArrayItem e1 = (ga1 != null ? ga1.peek() : null);
              if (e1 == null) {
                e1 = new com.linkedin.avro.fastserde.generated.avro.NestedArrayItem();
              }
              e1.customDecode(in);
              a1.add(e1);
            }
          }
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 1; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          long size0 = in.readArrayStart();
          java.util.List<java.util.List<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem>> a0 = this.NestedArrayItems;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.util.List<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem>>((int)size0, SCHEMA$.getField("NestedArrayItems").schema());
            this.NestedArrayItems = a0;
          } else a0.clear();
          SpecificData.Array<java.util.List<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem>> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.util.List<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem>>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.util.List<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem> e0 = (ga0 != null ? ga0.peek() : null);
              long size1 = in.readArrayStart();
              java.util.List<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem> a1 = e0;
              if (a1 == null) {
                a1 = new SpecificData.Array<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem>((int)size1, SCHEMA$.getField("NestedArrayItems").schema().getElementType());
                e0 = a1;
              } else a1.clear();
              SpecificData.Array<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.linkedin.avro.fastserde.generated.avro.NestedArrayItem>)a1 : null);
              for ( ; 0 < size1; size1 = in.arrayNext()) {
                for ( ; size1 != 0; size1--) {
                  com.linkedin.avro.fastserde.generated.avro.NestedArrayItem e1 = (ga1 != null ? ga1.peek() : null);
                  if (e1 == null) {
                    e1 = new com.linkedin.avro.fastserde.generated.avro.NestedArrayItem();
                  }
                  e1.customDecode(in);
                  a1.add(e1);
                }
              }
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










