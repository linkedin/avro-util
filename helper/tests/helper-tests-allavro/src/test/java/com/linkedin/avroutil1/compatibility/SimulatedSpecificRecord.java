/*
 * Copyright 2022 LinkedIn Corp.
 * Licensed under the BSD 2-Clause License (the "License").
 * See License in the project root for license information.
 */

package com.linkedin.avroutil1.compatibility;

import org.apache.avro.specific.SpecificData;


/**
 * originally generated by avro under 1.9, with modifications
 */
public class SimulatedSpecificRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3415483565906477794L;
  public static final org.apache.avro.Schema SCHEMA$ = AvroCompatibilityHelper.parse("{\"type\":\"record\",\"name\":\"SimulatedSpecificRecord\",\"namespace\":\"com.linkedin.avroutil1.compatibility19\",\"fields\":[{\"name\":\"utf8WithFieldOnly\",\"type\":\"string\"},{\"name\":\"utf8WithSetterOnly\",\"type\":\"string\"},{\"name\":\"utf8WithBoth\",\"type\":\"string\"},{\"name\":\"stringWithFieldOnly\",\"type\":\"string\"},{\"name\":\"stringWithSetterOnly\",\"type\":\"string\"},{\"name\":\"stringWithBoth\",\"type\":\"string\"},{\"name\":\"notAString\",\"type\":\"int\"},{\"name\":\"int\",\"type\":\"string\"},{\"name\":\"class\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = SpecificData.get();



   public CharSequence utf8WithFieldOnly;
   private CharSequence utf8WithSetterOnlyPrivate;
   public CharSequence utf8WithBoth;
   public String stringWithFieldOnly;
   private String stringWithSetterOnlyPrivate;
   public String stringWithBoth;
   public int notAString;
   public CharSequence int$;
   public String class$;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SimulatedSpecificRecord() {}

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return utf8WithFieldOnly;
    case 1: return utf8WithSetterOnlyPrivate;
    case 2: return utf8WithBoth;
    case 3: return stringWithFieldOnly;
    case 4: return stringWithSetterOnlyPrivate;
    case 5: return stringWithBoth;
    case 6: return notAString;
    case 7: return int$;
    case 8: return class$;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: utf8WithFieldOnly = (CharSequence)value$; break;
    case 1: utf8WithSetterOnlyPrivate = (CharSequence)value$; break;
    case 2: utf8WithBoth = (CharSequence)value$; break;
    case 3: stringWithFieldOnly = (String) value$; break;
    case 4: stringWithSetterOnlyPrivate = (String)value$; break;
    case 5: stringWithBoth = (String)value$; break;
    case 6: notAString = (Integer)value$; break;
    case 7: int$ = (CharSequence)value$; break;
    case 8: class$ = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'utf8WithSetterOnly' field.
   * @return The value of the 'utf8WithSetterOnly' field.
   */
  public CharSequence getUtf8WithSetterOnly() {
    return utf8WithSetterOnlyPrivate;
  }


  /**
   * Sets the value of the 'utf8WithSetterOnly' field.
   * @param value the value to set.
   */
  public void setUtf8WithSetterOnly(CharSequence value) {
    this.utf8WithSetterOnlyPrivate = value;
  }

  /**
   * Gets the value of the 'utf8WithBoth' field.
   * @return The value of the 'utf8WithBoth' field.
   */
  public CharSequence getUtf8WithBoth() {
    return utf8WithBoth;
  }


  /**
   * Sets the value of the 'utf8WithBoth' field.
   * @param value the value to set.
   */
  public void setUtf8WithBoth(CharSequence value) {
    this.utf8WithBoth = value;
  }

  /**
   * Gets the value of the 'stringWithSetterOnly' field.
   * @return The value of the 'stringWithSetterOnly' field.
   */
  public String getStringWithSetterOnly() {
    return stringWithSetterOnlyPrivate;
  }


  /**
   * Sets the value of the 'stringWithSetterOnly' field.
   * @param value the value to set.
   */
  public void setStringWithSetterOnly(String value) {
    this.stringWithSetterOnlyPrivate = value;
  }

  /**
   * Gets the value of the 'stringWithBoth' field.
   * @return The value of the 'stringWithBoth' field.
   */
  public String getStringWithBoth() {
    return stringWithBoth;
  }


  /**
   * Sets the value of the 'stringWithBoth' field.
   * @param value the value to set.
   */
  public void setStringWithBoth(String value) {
    this.stringWithBoth = value;
  }

  /**
   * Gets the value of the 'notAString' field.
   * @return The value of the 'notAString' field.
   */
  public int getNotAString() {
    return notAString;
  }


  /**
   * Sets the value of the 'notAString' field.
   * @param value the value to set.
   */
  public void setNotAString(int value) {
    this.notAString = value;
  }

  /**
   * Gets the value of the 'int$' field.
   * @return The value of the 'int$' field.
   */
  public CharSequence getInt$() {
    return int$;
  }


  /**
   * Sets the value of the 'int$' field.
   * @param value the value to set.
   */
  public void setInt$(CharSequence value) {
    this.int$ = value;
  }

  /**
   * Gets the value of the 'class$' field.
   * @return The value of the 'class$' field.
   */
  public CharSequence getClass$() {
    return class$;
  }


  /**
   * Sets the value of the 'class$' field.
   * @param value the value to set.
   */
  public void setClass$(String value) {
    this.class$ = value;
  }



  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SimulatedSpecificRecord>
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter<>(SCHEMA$);

  public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, AvroCompatibilityHelper.newBinaryEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SimulatedSpecificRecord>
    READER$ = new org.apache.avro.specific.SpecificDatumReader<>(SCHEMA$);

  public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, AvroCompatibilityHelper.newBinaryDecoder(in));
  }


}