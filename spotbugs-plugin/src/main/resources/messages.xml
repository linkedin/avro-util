<?xml version="1.0" encoding="UTF-8"?>

<MessageCollection xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/spotbugs/spotbugs/master/spotbugs/etc/messagecollection.xsd">
    <Plugin>
        <ShortDescription>avro-util apotbugs plugin</ShortDescription>
        <Details>provides detections related to use of known-problematic avro APIs</Details>
    </Plugin>

    <!-- detector descriptions -->

    <Detector class="com.linkedin.avroutil1.spotbugs.BinaryDecoderInstantiationDetector">
        <Details>
            detects direct instantiations of org.apache.avro.io.BinaryDecoder
        </Details>
    </Detector>
    <Detector class="com.linkedin.avroutil1.spotbugs.BinaryEncoderInstantiationDetector">
        <Details>
            detects direct instantiations of org.apache.avro.io.BinaryEncoder
        </Details>
    </Detector>
    <Detector class="com.linkedin.avroutil1.spotbugs.EnumSymbolInstantiationDetector">
        <Details>
            detects direct instantiations of org.apache.avro.generic.GenericData$EnumSymbol
        </Details>
    </Detector>
    <Detector class="com.linkedin.avroutil1.spotbugs.FieldDefaultValueAccessDetector">
        <Details>
            detects access to Schema.Field default value method(s)
        </Details>
    </Detector>
    <Detector class="com.linkedin.avroutil1.spotbugs.FixedInstantiationDetector">
        <Details>
            detects direct instantiations of org.apache.avro.generic.GenericData$Fixed
        </Details>
    </Detector>
    <Detector class="com.linkedin.avroutil1.spotbugs.GenericRecordBuilderUsageDetector">
        <Details>
            detects usage of org.apache.avro.generic.GenericRecordBuilder
        </Details>
    </Detector>
    <Detector class="com.linkedin.avroutil1.spotbugs.InstanceofGenericRecordDetector">
        <Details>
            detects "instanceof GenericRecord" tests
        </Details>
    </Detector>
    <Detector class="com.linkedin.avroutil1.spotbugs.JsonDecoderInstantiationDetector">
        <Details>
            detects direct instantiations of org.apache.avro.io.JsonDecoder
        </Details>
    </Detector>
    <Detector class="com.linkedin.avroutil1.spotbugs.JsonDecoderViaDecoderFactoryDetector">
        <Details>
            detects direct instantiations of org.apache.avro.io.JsonDecoder via org.apache.avro.io.DecoderFactory
        </Details>
    </Detector>
    <Detector class="com.linkedin.avroutil1.spotbugs.JsonEncoderInstantiationDetector">
        <Details>
            detects direct instantiations of org.apache.avro.io.JsonEncoder
        </Details>
    </Detector>
    <Detector class="com.linkedin.avroutil1.spotbugs.OldSchemaConstructableUsageDetector">
        <Details>
            detects usage of org.apache.avro.specific.SpecificDatumReader$SchemaConstructable
        </Details>
    </Detector>
    <Detector class="com.linkedin.avroutil1.spotbugs.PropAccessDetector">
        <Details>
            detects usage of incompatible schema/field props APIs
        </Details>
    </Detector>
    <Detector class="com.linkedin.avroutil1.spotbugs.SchemaFieldInstantiationDetector">
        <Details>
            detects direct instantiations of org.apache.avro.Schema$Field
        </Details>
    </Detector>
    <Detector class="com.linkedin.avroutil1.spotbugs.SpecificDataNewInstanceUsageDetector">
        <Details>
            detects usage of org.apache.avro.specific.SpecificData.newInstance()
        </Details>
    </Detector>

    <!-- bug pattern descriptions -->

    <BugPattern type="BINARY_DECODER_INSTANTIATION">
        <ShortDescription>direct BinaryDecoder instantiation</ShortDescription>
        <LongDescription>
            direct instantiations of org.apache.avro.io.BinaryDecoder, which is not directly accessible in modern avro
        </LongDescription>
        <Details>
            <![CDATA[
   <p>
      org.apache.avro.io.BinaryDecoder's constructor was made package-private in modern avro
      org.apache.avro.io.DecoderFactory exists in avro 1.4+, but was not absolutely required under 1.4.
      for broadest compatibility (and ability to reuse existing custom decoders for new InputStreams) use
      com.linkedin.avroutil1.compatibility.AvroCompatibilityHelper.newBinaryDecoder()
   </p>
]]>
        </Details>
    </BugPattern>
    <BugPattern type="BINARY_ENCODER_INSTANTIATION">
        <ShortDescription>direct BinaryEncoder instantiation</ShortDescription>
        <LongDescription>
            direct instantiations of org.apache.avro.io.BinaryEncoder, which is abstract in modern avro
        </LongDescription>
        <Details>
            <![CDATA[
   <p>
      org.apache.avro.io.BinaryEncoder was made abstract in modern avro, while
      org.apache.avro.io.EncoderFactory only exists in avro 1.5+. for broadest compatibility
      use com.linkedin.avroutil1.compatibility.AvroCompatibilityHelper.newBinaryEncoder()
   </p>
]]>
        </Details>
    </BugPattern>
    <BugPattern type="ENUMSYMBOL_INSTANTIATION">
        <ShortDescription>direct EnumSymbol instantiation</ShortDescription>
        <LongDescription>
            direct instantiations of org.apache.avro.generic.GenericData$EnumSymbol, which was incompatibly changed in avro 1.5
        </LongDescription>
        <Details>
            <![CDATA[
   <p>
      org.apache.avro.generic.GenericData$EnumSymbol is constructed using only the string symbol before avro 1.5
      but requires a Schema argument in 1.5+, as such there's no way to do this across all avro versions.
      use AvroCompatibilityHelper.newEnumSymbol()
   </p>
]]>
        </Details>
    </BugPattern>
    <BugPattern type="FIELD_DEFAULT_VALUE_ACCESS">
        <ShortDescription>field defaultValue access</ShortDescription>
        <LongDescription>
            access to org.apache.avro.Schema#Field.defaultValue(), which is an API that avro broke
        </LongDescription>
        <Details>
            <![CDATA[
   <p>
      org.apache.avro.Schema#Field.defaultValue() returns a jackson 1 JsonNode in avro < 1.9.
      its been deprecated in 1.8 and replaced with defaultVal(), which returns a java wrapper
      or other object. in 1.9+ its been made package-protected and now returns jackson 2 JsonNodes
   </p>
]]>
        </Details>
    </BugPattern>
    <BugPattern type="FIXED_INSTANTIATION">
        <ShortDescription>direct Fixed instantiation</ShortDescription>
        <LongDescription>
            direct instantiations of org.apache.avro.generic.GenericData$Fixed, which was incompatibly changed in avro 1.5
        </LongDescription>
        <Details>
            <![CDATA[
   <p>
      org.apache.avro.generic.GenericData$Fixed is constructed using only the byte[] contents before avro 1.5
      but requires a Schema argument in 1.5+, as such there's no way to do this across all avro versions.
      use AvroCompatibilityHelper.newFixed()
   </p>
]]>
        </Details>
    </BugPattern>
    <BugPattern type="GENERICRECORDBUILDER_USAGE">
        <ShortDescription>use of GenericRecordBuilder</ShortDescription>
        <LongDescription>
            usage of org.apache.avro.generic.GenericRecordBuilder, which only exists in avro 1.6+
        </LongDescription>
        <Details>
            <![CDATA[
   <p>
      org.apache.avro.generic.GenericRecordBuilder was only added to avro in 1.6. As such using it renders
      your code incompatible with older avro and it's best avoided
   </p>
]]>
        </Details>
    </BugPattern>
    <BugPattern type="INSTANCEOF_GENERICRECORD">
        <ShortDescription>instanceof GenericRecord check</ShortDescription>
        <LongDescription>
            starting with avro 1.7, specific records also implement GenericRecord
        </LongDescription>
        <Details>
            <![CDATA[
   <p>
      starting with avro 1.7, specific records also implement org.apache.avro.generic.GenericRecord,
      making any "instanceof GenericRecord" checks always return true and completely meaningless.
      use AvroCompatibilityHelper.isGenericRecord() instead
   </p>
]]>
        </Details>
    </BugPattern>
    <BugPattern type="JSON_DECODER_INSTANTIATION">
        <ShortDescription>direct JsonDecoder instantiation</ShortDescription>
        <LongDescription>
            direct instantiations of org.apache.avro.io.JsonDecoder, which is not directly accessible in modern avro
        </LongDescription>
        <Details>
            <![CDATA[
   <p>
      org.apache.avro.io.JsonDecoder's constructors were made package-private in modern avro
      org.apache.avro.io.DecoderFactory exists in avro 1.4+, but was not absolutely required under 1.4.
      for broadest compatibility (and ability to parse both older and new json formats) use
      com.linkedin.avroutil1.compatibility.AvroCompatibilityHelper.newCompatibleJsonDecoder()
   </p>
]]>
        </Details>
    </BugPattern>
    <BugPattern type="JSON_DECODER_FACTORY_INSTANTIATION">
        <ShortDescription>JsonDecoder instantiation via DecoderFactory</ShortDescription>
        <LongDescription>
            instantiations of org.apache.avro.io.JsonDecoder via DecoderFactory, which may not be compatible with old/new json format
        </LongDescription>
        <Details>
            <![CDATA[
   <p>
      JsonDecoders built via org.apache.avro.io.DecoderFactory can only handle the json format used by the runtime avro version.
      avro has made a breaking change to its json format in 1.5+ and to be able to decode both formats its recommended to
      use the compatible json decoder available via AvroCompatibilityHelper.newCompatibleJsonDecoder()
   </p>
]]>
        </Details>
    </BugPattern>
    <BugPattern type="JSON_ENCODER_INSTANTIATION">
        <ShortDescription>direct JsonEncoder instantiation</ShortDescription>
        <LongDescription>
            direct instantiations of org.apache.avro.io.JsonEncoder, which is not directly accessible in modern avro
        </LongDescription>
        <Details>
            <![CDATA[
   <p>
      org.apache.avro.io.JsonEncoder was made accessible only via
      org.apache.avro.io.EncoderFactory in avro 1.5+. for broadest compatibility
      use com.linkedin.avroutil1.compatibility.AvroCompatibilityHelper.newJsonEncoder()
   </p>
]]>
        </Details>
    </BugPattern>
    <BugPattern type="OLD_SCHEMACONSTRUCTABLE_USAGE">
        <ShortDescription>usage of org.apache.avro.specific.SpecificDatumReader$SchemaConstructable</ShortDescription>
        <LongDescription>
            usage of org.apache.avro.specific.SpecificDatumReader$SchemaConstructable
        </LongDescription>
        <Details>
            <![CDATA[
   <p>
      org.apache.avro.specific.SpecificDatumReader$SchemaConstructable was renamed to
      org.apache.avro.specific.SpecificData$SchemaConstructable in avro >= 1.6 hence
      should not be directly referenced by portable code.
      see AvroCompatibilityHelper.newInstance()
   </p>
]]>
        </Details>
    </BugPattern>
    <BugPattern type="PROP_ACCESS">
        <ShortDescription>incompatible schema/field props access</ShortDescription>
        <LongDescription>
            usage of schema/field props APIs that are not compatible across avro versions
        </LongDescription>
        <Details>
            <![CDATA[
   <p>
      detects access to the following methods on Schema, Schema$Field and JsonProperties:
      <ul>
         <li>getJsonProp() - returns jackson1 JsonNode in avro 1.7.3, became private in 1.9 (and moved to jackson2)</li>
         <li>getObjectProp() - in avro 1.8+</li>
         <li>addProp(JsonNode) - uses jackson1 in avro 1.7.3, became private in 1.9 (and moved to jackson2)</li>
         <li>addProp(Object) - in avro 1.8+</li>
         <li>props() - avro 1.6 to 1.8</li>
         <li>getJsonProps() - uses jackson1 in avro 1.7.3 to 1.8</li>
         <li>getObjectProps() - in avro 1.8, became private in 1.9</li>
         <li>addAllProps() - in avro 1.9+</li>
      </ul>
      NOTE: the getProp(Str) and addProp(Str) methods exist in all avro versions (hence are compatible),
      but only operate on string props
   </p>
]]>
        </Details>
    </BugPattern>
    <BugPattern type="SCHEMAFIELD_INSTANTIATION">
        <ShortDescription>direct Schema.Field instantiation</ShortDescription>
        <LongDescription>
            direct instantiation of org.apache.avro.Schema$Field, which there is no way of compatibly doing across avro versions
        </LongDescription>
        <Details>
            <![CDATA[
   <p>
      org.apache.avro.Schema$Field has switched from using jackson1 to using Object literals for default values
      (as part of avro moving to jackson2 internally) starting with 1.9. this completely changed all constructor signatures.
      use AvroCompatibilityHelper.createSchemaField() instead.
   </p>
]]>
        </Details>
    </BugPattern>
    <BugPattern type="SPECIFICDATA_NEWINSTANCE_USAGE">
        <ShortDescription>usage of org.apache.avro.specific.SpecificData.newInstance()</ShortDescription>
        <LongDescription>
            usage of org.apache.avro.specific.SpecificData.newInstance()
        </LongDescription>
        <Details>
            <![CDATA[
   <p>
      org.apache.avro.specific.SpecificData.newInstance() will not honor "old" SchemaConstructable
      classes under avro < 1.6. see AvroCompatibilityHelper.newInstance()
   </p>
]]>
        </Details>
    </BugPattern>

    <!-- bug codes -->

    <BugCode abbrev="BDI">BinaryDecoder instantiation</BugCode>
    <BugCode abbrev="BEI">BinaryEncoder instantiation</BugCode>
    <BugCode abbrev="ESI">EnumSymbol instantiation</BugCode>
    <BugCode abbrev="FDVA">Field default value access</BugCode>
    <BugCode abbrev="FI">Fixed instantiation</BugCode>
    <BugCode abbrev="GRB">GenericRecordBuilder usage</BugCode>
    <BugCode abbrev="IOGR">instanceof GenericRecord</BugCode>
    <BugCode abbrev="JDI">JsonDecoder instantiation</BugCode>
    <BugCode abbrev="JDFI">JsonDecoder factory instantiation</BugCode>
    <BugCode abbrev="JEI">JsonEncoder instantiation</BugCode>
    <BugCode abbrev="OSCI">Old SchemaConstructable usage</BugCode>
    <BugCode abbrev="PA">incompatible prop access</BugCode>
    <BugCode abbrev="SDNI">SecificData.newInstance() usage</BugCode>
    <BugCode abbrev="SFI">Schema.Field instantiation</BugCode>
</MessageCollection>